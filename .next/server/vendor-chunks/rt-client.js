"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rt-client";
exports.ids = ["vendor-chunks/rt-client"];
exports.modules = {

/***/ "(ssr)/./node_modules/rt-client/dist/esm/index.js":
/*!**************************************************!*\
  !*** ./node_modules/rt-client/dist/esm/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LowLevelRTClient: () => (/* binding */ LowLevelRTClient),\n/* harmony export */   MessageItemType: () => (/* binding */ MessageItemType),\n/* harmony export */   RTClient: () => (/* binding */ RTClient),\n/* harmony export */   RTError: () => (/* binding */ RTError),\n/* harmony export */   isFunctionCallItem: () => (/* binding */ isFunctionCallItem),\n/* harmony export */   isMessageItem: () => (/* binding */ isMessageItem)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! net */ \"net\");\n/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tls */ \"tls\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! url */ \"url\");\n\n\n\n\n\n\n\n\n\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar MessageItemType = \"message\";\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar isRealtimeEvent = function(message) {\n    return typeof message === \"object\" && message !== null && \"type\" in message;\n};\nvar isServerMessageType = function(message) {\n    return isRealtimeEvent(message) && [\n        \"error\",\n        \"session.created\",\n        \"session.updated\",\n        \"input_audio_buffer.committed\",\n        \"input_audio_buffer.cleared\",\n        \"input_audio_buffer.speech_started\",\n        \"input_audio_buffer.speech_stopped\",\n        \"conversation.item.created\",\n        \"conversation.item.truncated\",\n        \"conversation.item.deleted\",\n        \"conversation.item.input_audio_transcription.completed\",\n        \"conversation.item.input_audio_transcription.failed\",\n        \"response.created\",\n        \"response.done\",\n        \"response.output_item.added\",\n        \"response.output_item.done\",\n        \"response.content_part.added\",\n        \"response.content_part.done\",\n        \"response.text.delta\",\n        \"response.text.done\",\n        \"response.audio_transcript.delta\",\n        \"response.audio_transcript.done\",\n        \"response.audio.delta\",\n        \"response.audio.done\",\n        \"response.function_call_arguments.delta\",\n        \"response.function_call_arguments.done\",\n        \"rate_limits.updated\",\n        \"session.avatar.connecting\",\n        \"session.avatar.connected\",\n        \"response.animation.blendshapes\"\n    ].includes(message.type);\n};\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar bufferUtil = {\n    exports: {}\n};\nvar constants;\nvar hasRequiredConstants;\nfunction requireConstants() {\n    if (hasRequiredConstants) return constants;\n    hasRequiredConstants = 1;\n    const BINARY_TYPES = [\n        'nodebuffer',\n        'arraybuffer',\n        'fragments'\n    ];\n    const hasBlob = typeof Blob !== 'undefined';\n    if (hasBlob) BINARY_TYPES.push('blob');\n    constants = {\n        BINARY_TYPES,\n        EMPTY_BUFFER: Buffer.alloc(0),\n        GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',\n        hasBlob,\n        kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),\n        kListener: Symbol('kListener'),\n        kStatusCode: Symbol('status-code'),\n        kWebSocket: Symbol('websocket'),\n        NOOP: ()=>{}\n    };\n    return constants;\n}\nvar hasRequiredBufferUtil;\nfunction requireBufferUtil() {\n    if (hasRequiredBufferUtil) return bufferUtil.exports;\n    hasRequiredBufferUtil = 1;\n    const { EMPTY_BUFFER } = requireConstants();\n    const FastBuffer = Buffer[Symbol.species];\n    /**\n\t * Merges an array of buffers into a new buffer.\n\t *\n\t * @param {Buffer[]} list The array of buffers to concat\n\t * @param {Number} totalLength The total length of buffers in the list\n\t * @return {Buffer} The resulting buffer\n\t * @public\n\t */ function concat(list, totalLength) {\n        if (list.length === 0) return EMPTY_BUFFER;\n        if (list.length === 1) return list[0];\n        const target = Buffer.allocUnsafe(totalLength);\n        let offset = 0;\n        for(let i = 0; i < list.length; i++){\n            const buf = list[i];\n            target.set(buf, offset);\n            offset += buf.length;\n        }\n        if (offset < totalLength) {\n            return new FastBuffer(target.buffer, target.byteOffset, offset);\n        }\n        return target;\n    }\n    /**\n\t * Masks a buffer using the given mask.\n\t *\n\t * @param {Buffer} source The buffer to mask\n\t * @param {Buffer} mask The mask to use\n\t * @param {Buffer} output The buffer where to store the result\n\t * @param {Number} offset The offset at which to start writing\n\t * @param {Number} length The number of bytes to mask.\n\t * @public\n\t */ function _mask(source, mask, output, offset, length) {\n        for(let i = 0; i < length; i++){\n            output[offset + i] = source[i] ^ mask[i & 3];\n        }\n    }\n    /**\n\t * Unmasks a buffer using the given mask.\n\t *\n\t * @param {Buffer} buffer The buffer to unmask\n\t * @param {Buffer} mask The mask to use\n\t * @public\n\t */ function _unmask(buffer, mask) {\n        for(let i = 0; i < buffer.length; i++){\n            buffer[i] ^= mask[i & 3];\n        }\n    }\n    /**\n\t * Converts a buffer to an `ArrayBuffer`.\n\t *\n\t * @param {Buffer} buf The buffer to convert\n\t * @return {ArrayBuffer} Converted buffer\n\t * @public\n\t */ function toArrayBuffer(buf) {\n        if (buf.length === buf.buffer.byteLength) {\n            return buf.buffer;\n        }\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n    }\n    /**\n\t * Converts `data` to a `Buffer`.\n\t *\n\t * @param {*} data The data to convert\n\t * @return {Buffer} The buffer\n\t * @throws {TypeError}\n\t * @public\n\t */ function toBuffer(data) {\n        toBuffer.readOnly = true;\n        if (Buffer.isBuffer(data)) return data;\n        let buf;\n        if (data instanceof ArrayBuffer) {\n            buf = new FastBuffer(data);\n        } else if (ArrayBuffer.isView(data)) {\n            buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n        } else {\n            buf = Buffer.from(data);\n            toBuffer.readOnly = false;\n        }\n        return buf;\n    }\n    bufferUtil.exports = {\n        concat,\n        mask: _mask,\n        toArrayBuffer,\n        toBuffer,\n        unmask: _unmask\n    };\n    /* istanbul ignore else  */ if (!process.env.WS_NO_BUFFER_UTIL) {\n        try {\n            const bufferUtil$1 = require('bufferutil');\n            bufferUtil.exports.mask = function(source, mask, output, offset, length) {\n                if (length < 48) _mask(source, mask, output, offset, length);\n                else bufferUtil$1.mask(source, mask, output, offset, length);\n            };\n            bufferUtil.exports.unmask = function(buffer, mask) {\n                if (buffer.length < 32) _unmask(buffer, mask);\n                else bufferUtil$1.unmask(buffer, mask);\n            };\n        } catch (e) {\n        // Continue regardless of the error.\n        }\n    }\n    return bufferUtil.exports;\n}\nvar limiter;\nvar hasRequiredLimiter;\nfunction requireLimiter() {\n    if (hasRequiredLimiter) return limiter;\n    hasRequiredLimiter = 1;\n    const kDone = Symbol('kDone');\n    const kRun = Symbol('kRun');\n    /**\n\t * A very simple job queue with adjustable concurrency. Adapted from\n\t * https://github.com/STRML/async-limiter\n\t */ class Limiter {\n        /**\n\t   * Creates a new `Limiter`.\n\t   *\n\t   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n\t   *     to run concurrently\n\t   */ constructor(concurrency){\n            this[kDone] = ()=>{\n                this.pending--;\n                this[kRun]();\n            };\n            this.concurrency = concurrency || Infinity;\n            this.jobs = [];\n            this.pending = 0;\n        }\n        /**\n\t   * Adds a job to the queue.\n\t   *\n\t   * @param {Function} job The job to run\n\t   * @public\n\t   */ add(job) {\n            this.jobs.push(job);\n            this[kRun]();\n        }\n        /**\n\t   * Removes a job from the queue and runs it if possible.\n\t   *\n\t   * @private\n\t   */ [kRun]() {\n            if (this.pending === this.concurrency) return;\n            if (this.jobs.length) {\n                const job = this.jobs.shift();\n                this.pending++;\n                job(this[kDone]);\n            }\n        }\n    }\n    limiter = Limiter;\n    return limiter;\n}\nvar permessageDeflate;\nvar hasRequiredPermessageDeflate;\nfunction requirePermessageDeflate() {\n    if (hasRequiredPermessageDeflate) return permessageDeflate;\n    hasRequiredPermessageDeflate = 1;\n    const zlib = zlib__WEBPACK_IMPORTED_MODULE_1__;\n    const bufferUtil = requireBufferUtil();\n    const Limiter = requireLimiter();\n    const { kStatusCode } = requireConstants();\n    const FastBuffer = Buffer[Symbol.species];\n    const TRAILER = Buffer.from([\n        0x00,\n        0x00,\n        0xff,\n        0xff\n    ]);\n    const kPerMessageDeflate = Symbol('permessage-deflate');\n    const kTotalLength = Symbol('total-length');\n    const kCallback = Symbol('callback');\n    const kBuffers = Symbol('buffers');\n    const kError = Symbol('error');\n    //\n    // We limit zlib concurrency, which prevents severe memory fragmentation\n    // as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n    // and https://github.com/websockets/ws/issues/1202\n    //\n    // Intentionally global; it's the global thread pool that's an issue.\n    //\n    let zlibLimiter;\n    /**\n\t * permessage-deflate implementation.\n\t */ class PerMessageDeflate {\n        /**\n\t   * Creates a PerMessageDeflate instance.\n\t   *\n\t   * @param {Object} [options] Configuration options\n\t   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n\t   *     for, or request, a custom client window size\n\t   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n\t   *     acknowledge disabling of client context takeover\n\t   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n\t   *     calls to zlib\n\t   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n\t   *     use of a custom server window size\n\t   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n\t   *     disabling of server context takeover\n\t   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n\t   *     messages should not be compressed if context takeover is disabled\n\t   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n\t   *     deflate\n\t   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n\t   *     inflate\n\t   * @param {Boolean} [isServer=false] Create the instance in either server or\n\t   *     client mode\n\t   * @param {Number} [maxPayload=0] The maximum allowed message length\n\t   */ constructor(options, isServer, maxPayload){\n            this._maxPayload = maxPayload | 0;\n            this._options = options || {};\n            this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n            this._isServer = !!isServer;\n            this._deflate = null;\n            this._inflate = null;\n            this.params = null;\n            if (!zlibLimiter) {\n                const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n                zlibLimiter = new Limiter(concurrency);\n            }\n        }\n        /**\n\t   * @type {String}\n\t   */ static get extensionName() {\n            return 'permessage-deflate';\n        }\n        /**\n\t   * Create an extension negotiation offer.\n\t   *\n\t   * @return {Object} Extension parameters\n\t   * @public\n\t   */ offer() {\n            const params = {};\n            if (this._options.serverNoContextTakeover) {\n                params.server_no_context_takeover = true;\n            }\n            if (this._options.clientNoContextTakeover) {\n                params.client_no_context_takeover = true;\n            }\n            if (this._options.serverMaxWindowBits) {\n                params.server_max_window_bits = this._options.serverMaxWindowBits;\n            }\n            if (this._options.clientMaxWindowBits) {\n                params.client_max_window_bits = this._options.clientMaxWindowBits;\n            } else if (this._options.clientMaxWindowBits == null) {\n                params.client_max_window_bits = true;\n            }\n            return params;\n        }\n        /**\n\t   * Accept an extension negotiation offer/response.\n\t   *\n\t   * @param {Array} configurations The extension negotiation offers/reponse\n\t   * @return {Object} Accepted configuration\n\t   * @public\n\t   */ accept(configurations) {\n            configurations = this.normalizeParams(configurations);\n            this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n            return this.params;\n        }\n        /**\n\t   * Releases all resources used by the extension.\n\t   *\n\t   * @public\n\t   */ cleanup() {\n            if (this._inflate) {\n                this._inflate.close();\n                this._inflate = null;\n            }\n            if (this._deflate) {\n                const callback = this._deflate[kCallback];\n                this._deflate.close();\n                this._deflate = null;\n                if (callback) {\n                    callback(new Error('The deflate stream was closed while data was being processed'));\n                }\n            }\n        }\n        /**\n\t   *  Accept an extension negotiation offer.\n\t   *\n\t   * @param {Array} offers The extension negotiation offers\n\t   * @return {Object} Accepted configuration\n\t   * @private\n\t   */ acceptAsServer(offers) {\n            const opts = this._options;\n            const accepted = offers.find((params)=>{\n                if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {\n                    return false;\n                }\n                return true;\n            });\n            if (!accepted) {\n                throw new Error('None of the extension offers can be accepted');\n            }\n            if (opts.serverNoContextTakeover) {\n                accepted.server_no_context_takeover = true;\n            }\n            if (opts.clientNoContextTakeover) {\n                accepted.client_no_context_takeover = true;\n            }\n            if (typeof opts.serverMaxWindowBits === 'number') {\n                accepted.server_max_window_bits = opts.serverMaxWindowBits;\n            }\n            if (typeof opts.clientMaxWindowBits === 'number') {\n                accepted.client_max_window_bits = opts.clientMaxWindowBits;\n            } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n                delete accepted.client_max_window_bits;\n            }\n            return accepted;\n        }\n        /**\n\t   * Accept the extension negotiation response.\n\t   *\n\t   * @param {Array} response The extension negotiation response\n\t   * @return {Object} Accepted configuration\n\t   * @private\n\t   */ acceptAsClient(response) {\n            const params = response[0];\n            if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n                throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n            }\n            if (!params.client_max_window_bits) {\n                if (typeof this._options.clientMaxWindowBits === 'number') {\n                    params.client_max_window_bits = this._options.clientMaxWindowBits;\n                }\n            } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n                throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n            }\n            return params;\n        }\n        /**\n\t   * Normalize parameters.\n\t   *\n\t   * @param {Array} configurations The extension negotiation offers/reponse\n\t   * @return {Array} The offers/response with normalized parameters\n\t   * @private\n\t   */ normalizeParams(configurations) {\n            configurations.forEach((params)=>{\n                Object.keys(params).forEach((key)=>{\n                    let value = params[key];\n                    if (value.length > 1) {\n                        throw new Error(`Parameter \"${key}\" must have only a single value`);\n                    }\n                    value = value[0];\n                    if (key === 'client_max_window_bits') {\n                        if (value !== true) {\n                            const num = +value;\n                            if (!Number.isInteger(num) || num < 8 || num > 15) {\n                                throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                            }\n                            value = num;\n                        } else if (!this._isServer) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                    } else if (key === 'server_max_window_bits') {\n                        const num = +value;\n                        if (!Number.isInteger(num) || num < 8 || num > 15) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                        value = num;\n                    } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {\n                        if (value !== true) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                    } else {\n                        throw new Error(`Unknown parameter \"${key}\"`);\n                    }\n                    params[key] = value;\n                });\n            });\n            return configurations;\n        }\n        /**\n\t   * Decompress data. Concurrency limited.\n\t   *\n\t   * @param {Buffer} data Compressed data\n\t   * @param {Boolean} fin Specifies whether or not this is the last fragment\n\t   * @param {Function} callback Callback\n\t   * @public\n\t   */ decompress(data, fin, callback) {\n            zlibLimiter.add((done)=>{\n                this._decompress(data, fin, (err, result)=>{\n                    done();\n                    callback(err, result);\n                });\n            });\n        }\n        /**\n\t   * Compress data. Concurrency limited.\n\t   *\n\t   * @param {(Buffer|String)} data Data to compress\n\t   * @param {Boolean} fin Specifies whether or not this is the last fragment\n\t   * @param {Function} callback Callback\n\t   * @public\n\t   */ compress(data, fin, callback) {\n            zlibLimiter.add((done)=>{\n                this._compress(data, fin, (err, result)=>{\n                    done();\n                    callback(err, result);\n                });\n            });\n        }\n        /**\n\t   * Decompress data.\n\t   *\n\t   * @param {Buffer} data Compressed data\n\t   * @param {Boolean} fin Specifies whether or not this is the last fragment\n\t   * @param {Function} callback Callback\n\t   * @private\n\t   */ _decompress(data, fin, callback) {\n            const endpoint = this._isServer ? 'client' : 'server';\n            if (!this._inflate) {\n                const key = `${endpoint}_max_window_bits`;\n                const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n                this._inflate = zlib.createInflateRaw({\n                    ...this._options.zlibInflateOptions,\n                    windowBits\n                });\n                this._inflate[kPerMessageDeflate] = this;\n                this._inflate[kTotalLength] = 0;\n                this._inflate[kBuffers] = [];\n                this._inflate.on('error', inflateOnError);\n                this._inflate.on('data', inflateOnData);\n            }\n            this._inflate[kCallback] = callback;\n            this._inflate.write(data);\n            if (fin) this._inflate.write(TRAILER);\n            this._inflate.flush(()=>{\n                const err = this._inflate[kError];\n                if (err) {\n                    this._inflate.close();\n                    this._inflate = null;\n                    callback(err);\n                    return;\n                }\n                const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n                if (this._inflate._readableState.endEmitted) {\n                    this._inflate.close();\n                    this._inflate = null;\n                } else {\n                    this._inflate[kTotalLength] = 0;\n                    this._inflate[kBuffers] = [];\n                    if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                        this._inflate.reset();\n                    }\n                }\n                callback(null, data);\n            });\n        }\n        /**\n\t   * Compress data.\n\t   *\n\t   * @param {(Buffer|String)} data Data to compress\n\t   * @param {Boolean} fin Specifies whether or not this is the last fragment\n\t   * @param {Function} callback Callback\n\t   * @private\n\t   */ _compress(data, fin, callback) {\n            const endpoint = this._isServer ? 'server' : 'client';\n            if (!this._deflate) {\n                const key = `${endpoint}_max_window_bits`;\n                const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n                this._deflate = zlib.createDeflateRaw({\n                    ...this._options.zlibDeflateOptions,\n                    windowBits\n                });\n                this._deflate[kTotalLength] = 0;\n                this._deflate[kBuffers] = [];\n                this._deflate.on('data', deflateOnData);\n            }\n            this._deflate[kCallback] = callback;\n            this._deflate.write(data);\n            this._deflate.flush(zlib.Z_SYNC_FLUSH, ()=>{\n                if (!this._deflate) {\n                    //\n                    // The deflate stream was closed while data was being processed.\n                    //\n                    return;\n                }\n                let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n                if (fin) {\n                    data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n                }\n                //\n                // Ensure that the callback will not be called again in\n                // `PerMessageDeflate#cleanup()`.\n                //\n                this._deflate[kCallback] = null;\n                this._deflate[kTotalLength] = 0;\n                this._deflate[kBuffers] = [];\n                if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                    this._deflate.reset();\n                }\n                callback(null, data);\n            });\n        }\n    }\n    permessageDeflate = PerMessageDeflate;\n    /**\n\t * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n\t *\n\t * @param {Buffer} chunk A chunk of data\n\t * @private\n\t */ function deflateOnData(chunk) {\n        this[kBuffers].push(chunk);\n        this[kTotalLength] += chunk.length;\n    }\n    /**\n\t * The listener of the `zlib.InflateRaw` stream `'data'` event.\n\t *\n\t * @param {Buffer} chunk A chunk of data\n\t * @private\n\t */ function inflateOnData(chunk) {\n        this[kTotalLength] += chunk.length;\n        if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n            this[kBuffers].push(chunk);\n            return;\n        }\n        this[kError] = new RangeError('Max payload size exceeded');\n        this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n        this[kError][kStatusCode] = 1009;\n        this.removeListener('data', inflateOnData);\n        this.reset();\n    }\n    /**\n\t * The listener of the `zlib.InflateRaw` stream `'error'` event.\n\t *\n\t * @param {Error} err The emitted error\n\t * @private\n\t */ function inflateOnError(err) {\n        //\n        // There is no need to call `Zlib#close()` as the handle is automatically\n        // closed when an error is emitted.\n        //\n        this[kPerMessageDeflate]._inflate = null;\n        err[kStatusCode] = 1007;\n        this[kCallback](err);\n    }\n    return permessageDeflate;\n}\nvar validation = {\n    exports: {}\n};\nvar hasRequiredValidation;\nfunction requireValidation() {\n    if (hasRequiredValidation) return validation.exports;\n    hasRequiredValidation = 1;\n    const { isUtf8 } = buffer__WEBPACK_IMPORTED_MODULE_2__;\n    const { hasBlob } = requireConstants();\n    //\n    // Allowed token characters:\n    //\n    // '!', '#', '$', '%', '&', ''', '*', '+', '-',\n    // '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n    //\n    // tokenChars[32] === 0 // ' '\n    // tokenChars[33] === 1 // '!'\n    // tokenChars[34] === 0 // '\"'\n    // ...\n    //\n    // prettier-ignore\n    const tokenChars = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        0,\n        0,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        0,\n        1,\n        0,\n        1,\n        0 // 112 - 127\n    ];\n    /**\n\t * Checks if a status code is allowed in a close frame.\n\t *\n\t * @param {Number} code The status code\n\t * @return {Boolean} `true` if the status code is valid, else `false`\n\t * @public\n\t */ function isValidStatusCode(code) {\n        return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;\n    }\n    /**\n\t * Checks if a given buffer contains only correct UTF-8.\n\t * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n\t * Markus Kuhn.\n\t *\n\t * @param {Buffer} buf The buffer to check\n\t * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n\t * @public\n\t */ function _isValidUTF8(buf) {\n        const len = buf.length;\n        let i = 0;\n        while(i < len){\n            if ((buf[i] & 0x80) === 0) {\n                // 0xxxxxxx\n                i++;\n            } else if ((buf[i] & 0xe0) === 0xc0) {\n                // 110xxxxx 10xxxxxx\n                if (i + 1 === len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i] & 0xfe) === 0xc0 // Overlong\n                ) {\n                    return false;\n                }\n                i += 2;\n            } else if ((buf[i] & 0xf0) === 0xe0) {\n                // 1110xxxx 10xxxxxx 10xxxxxx\n                if (i + 2 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 || // Overlong\n                buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0 // Surrogate (U+D800 - U+DFFF)\n                ) {\n                    return false;\n                }\n                i += 3;\n            } else if ((buf[i] & 0xf8) === 0xf0) {\n                // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n                if (i + 3 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || (buf[i + 3] & 0xc0) !== 0x80 || buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 || // Overlong\n                buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4 // > U+10FFFF\n                ) {\n                    return false;\n                }\n                i += 4;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n\t * Determines whether a value is a `Blob`.\n\t *\n\t * @param {*} value The value to be tested\n\t * @return {Boolean} `true` if `value` is a `Blob`, else `false`\n\t * @private\n\t */ function isBlob(value) {\n        return hasBlob && typeof value === 'object' && typeof value.arrayBuffer === 'function' && typeof value.type === 'string' && typeof value.stream === 'function' && (value[Symbol.toStringTag] === 'Blob' || value[Symbol.toStringTag] === 'File');\n    }\n    validation.exports = {\n        isBlob,\n        isValidStatusCode,\n        isValidUTF8: _isValidUTF8,\n        tokenChars\n    };\n    if (isUtf8) {\n        validation.exports.isValidUTF8 = function(buf) {\n            return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);\n        };\n    } else if (!process.env.WS_NO_UTF_8_VALIDATE) {\n        try {\n            const isValidUTF8 = require('utf-8-validate');\n            validation.exports.isValidUTF8 = function(buf) {\n                return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);\n            };\n        } catch (e) {\n        // Continue regardless of the error.\n        }\n    }\n    return validation.exports;\n}\nvar receiver;\nvar hasRequiredReceiver;\nfunction requireReceiver() {\n    if (hasRequiredReceiver) return receiver;\n    hasRequiredReceiver = 1;\n    const { Writable } = stream__WEBPACK_IMPORTED_MODULE_0__;\n    const PerMessageDeflate = requirePermessageDeflate();\n    const { BINARY_TYPES, EMPTY_BUFFER, kStatusCode, kWebSocket } = requireConstants();\n    const { concat, toArrayBuffer, unmask } = requireBufferUtil();\n    const { isValidStatusCode, isValidUTF8 } = requireValidation();\n    const FastBuffer = Buffer[Symbol.species];\n    const GET_INFO = 0;\n    const GET_PAYLOAD_LENGTH_16 = 1;\n    const GET_PAYLOAD_LENGTH_64 = 2;\n    const GET_MASK = 3;\n    const GET_DATA = 4;\n    const INFLATING = 5;\n    const DEFER_EVENT = 6;\n    /**\n\t * HyBi Receiver implementation.\n\t *\n\t * @extends Writable\n\t */ class Receiver extends Writable {\n        /**\n\t   * Creates a Receiver instance.\n\t   *\n\t   * @param {Object} [options] Options object\n\t   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n\t   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n\t   *     multiple times in the same tick\n\t   * @param {String} [options.binaryType=nodebuffer] The type for binary data\n\t   * @param {Object} [options.extensions] An object containing the negotiated\n\t   *     extensions\n\t   * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n\t   *     client or server mode\n\t   * @param {Number} [options.maxPayload=0] The maximum allowed message length\n\t   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n\t   *     not to skip UTF-8 validation for text and close messages\n\t   */ constructor(options = {}){\n            super();\n            this._allowSynchronousEvents = options.allowSynchronousEvents !== undefined ? options.allowSynchronousEvents : true;\n            this._binaryType = options.binaryType || BINARY_TYPES[0];\n            this._extensions = options.extensions || {};\n            this._isServer = !!options.isServer;\n            this._maxPayload = options.maxPayload | 0;\n            this._skipUTF8Validation = !!options.skipUTF8Validation;\n            this[kWebSocket] = undefined;\n            this._bufferedBytes = 0;\n            this._buffers = [];\n            this._compressed = false;\n            this._payloadLength = 0;\n            this._mask = undefined;\n            this._fragmented = 0;\n            this._masked = false;\n            this._fin = false;\n            this._opcode = 0;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragments = [];\n            this._errored = false;\n            this._loop = false;\n            this._state = GET_INFO;\n        }\n        /**\n\t   * Implements `Writable.prototype._write()`.\n\t   *\n\t   * @param {Buffer} chunk The chunk of data to write\n\t   * @param {String} encoding The character encoding of `chunk`\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ _write(chunk, encoding, cb) {\n            if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n            this._bufferedBytes += chunk.length;\n            this._buffers.push(chunk);\n            this.startLoop(cb);\n        }\n        /**\n\t   * Consumes `n` bytes from the buffered data.\n\t   *\n\t   * @param {Number} n The number of bytes to consume\n\t   * @return {Buffer} The consumed bytes\n\t   * @private\n\t   */ consume(n) {\n            this._bufferedBytes -= n;\n            if (n === this._buffers[0].length) return this._buffers.shift();\n            if (n < this._buffers[0].length) {\n                const buf = this._buffers[0];\n                this._buffers[0] = new FastBuffer(buf.buffer, buf.byteOffset + n, buf.length - n);\n                return new FastBuffer(buf.buffer, buf.byteOffset, n);\n            }\n            const dst = Buffer.allocUnsafe(n);\n            do {\n                const buf = this._buffers[0];\n                const offset = dst.length - n;\n                if (n >= buf.length) {\n                    dst.set(this._buffers.shift(), offset);\n                } else {\n                    dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n                    this._buffers[0] = new FastBuffer(buf.buffer, buf.byteOffset + n, buf.length - n);\n                }\n                n -= buf.length;\n            }while (n > 0);\n            return dst;\n        }\n        /**\n\t   * Starts the parsing loop.\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ startLoop(cb) {\n            this._loop = true;\n            do {\n                switch(this._state){\n                    case GET_INFO:\n                        this.getInfo(cb);\n                        break;\n                    case GET_PAYLOAD_LENGTH_16:\n                        this.getPayloadLength16(cb);\n                        break;\n                    case GET_PAYLOAD_LENGTH_64:\n                        this.getPayloadLength64(cb);\n                        break;\n                    case GET_MASK:\n                        this.getMask();\n                        break;\n                    case GET_DATA:\n                        this.getData(cb);\n                        break;\n                    case INFLATING:\n                    case DEFER_EVENT:\n                        this._loop = false;\n                        return;\n                }\n            }while (this._loop);\n            if (!this._errored) cb();\n        }\n        /**\n\t   * Reads the first two bytes of a frame.\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ getInfo(cb) {\n            if (this._bufferedBytes < 2) {\n                this._loop = false;\n                return;\n            }\n            const buf = this.consume(2);\n            if ((buf[0] & 0x30) !== 0x00) {\n                const error = this.createError(RangeError, 'RSV2 and RSV3 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_2_3');\n                cb(error);\n                return;\n            }\n            const compressed = (buf[0] & 0x40) === 0x40;\n            if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n                const error = this.createError(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');\n                cb(error);\n                return;\n            }\n            this._fin = (buf[0] & 0x80) === 0x80;\n            this._opcode = buf[0] & 0x0f;\n            this._payloadLength = buf[1] & 0x7f;\n            if (this._opcode === 0x00) {\n                if (compressed) {\n                    const error = this.createError(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');\n                    cb(error);\n                    return;\n                }\n                if (!this._fragmented) {\n                    const error = this.createError(RangeError, 'invalid opcode 0', true, 1002, 'WS_ERR_INVALID_OPCODE');\n                    cb(error);\n                    return;\n                }\n                this._opcode = this._fragmented;\n            } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n                if (this._fragmented) {\n                    const error = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, 'WS_ERR_INVALID_OPCODE');\n                    cb(error);\n                    return;\n                }\n                this._compressed = compressed;\n            } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n                if (!this._fin) {\n                    const error = this.createError(RangeError, 'FIN must be set', true, 1002, 'WS_ERR_EXPECTED_FIN');\n                    cb(error);\n                    return;\n                }\n                if (compressed) {\n                    const error = this.createError(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');\n                    cb(error);\n                    return;\n                }\n                if (this._payloadLength > 0x7d || this._opcode === 0x08 && this._payloadLength === 1) {\n                    const error = this.createError(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, 'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH');\n                    cb(error);\n                    return;\n                }\n            } else {\n                const error = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, 'WS_ERR_INVALID_OPCODE');\n                cb(error);\n                return;\n            }\n            if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n            this._masked = (buf[1] & 0x80) === 0x80;\n            if (this._isServer) {\n                if (!this._masked) {\n                    const error = this.createError(RangeError, 'MASK must be set', true, 1002, 'WS_ERR_EXPECTED_MASK');\n                    cb(error);\n                    return;\n                }\n            } else if (this._masked) {\n                const error = this.createError(RangeError, 'MASK must be clear', true, 1002, 'WS_ERR_UNEXPECTED_MASK');\n                cb(error);\n                return;\n            }\n            if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n            else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n            else this.haveLength(cb);\n        }\n        /**\n\t   * Gets extended payload length (7+16).\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ getPayloadLength16(cb) {\n            if (this._bufferedBytes < 2) {\n                this._loop = false;\n                return;\n            }\n            this._payloadLength = this.consume(2).readUInt16BE(0);\n            this.haveLength(cb);\n        }\n        /**\n\t   * Gets extended payload length (7+64).\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ getPayloadLength64(cb) {\n            if (this._bufferedBytes < 8) {\n                this._loop = false;\n                return;\n            }\n            const buf = this.consume(8);\n            const num = buf.readUInt32BE(0);\n            //\n            // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n            // if payload length is greater than this number.\n            //\n            if (num > Math.pow(2, 53 - 32) - 1) {\n                const error = this.createError(RangeError, 'Unsupported WebSocket frame: payload length > 2^53 - 1', false, 1009, 'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH');\n                cb(error);\n                return;\n            }\n            this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n            this.haveLength(cb);\n        }\n        /**\n\t   * Payload length has been read.\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ haveLength(cb) {\n            if (this._payloadLength && this._opcode < 0x08) {\n                this._totalPayloadLength += this._payloadLength;\n                if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n                    const error = this.createError(RangeError, 'Max payload size exceeded', false, 1009, 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH');\n                    cb(error);\n                    return;\n                }\n            }\n            if (this._masked) this._state = GET_MASK;\n            else this._state = GET_DATA;\n        }\n        /**\n\t   * Reads mask bytes.\n\t   *\n\t   * @private\n\t   */ getMask() {\n            if (this._bufferedBytes < 4) {\n                this._loop = false;\n                return;\n            }\n            this._mask = this.consume(4);\n            this._state = GET_DATA;\n        }\n        /**\n\t   * Reads data bytes.\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ getData(cb) {\n            let data = EMPTY_BUFFER;\n            if (this._payloadLength) {\n                if (this._bufferedBytes < this._payloadLength) {\n                    this._loop = false;\n                    return;\n                }\n                data = this.consume(this._payloadLength);\n                if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {\n                    unmask(data, this._mask);\n                }\n            }\n            if (this._opcode > 0x07) {\n                this.controlMessage(data, cb);\n                return;\n            }\n            if (this._compressed) {\n                this._state = INFLATING;\n                this.decompress(data, cb);\n                return;\n            }\n            if (data.length) {\n                //\n                // This message is not compressed so its length is the sum of the payload\n                // length of all fragments.\n                //\n                this._messageLength = this._totalPayloadLength;\n                this._fragments.push(data);\n            }\n            this.dataMessage(cb);\n        }\n        /**\n\t   * Decompresses data.\n\t   *\n\t   * @param {Buffer} data Compressed data\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ decompress(data, cb) {\n            const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n            perMessageDeflate.decompress(data, this._fin, (err, buf)=>{\n                if (err) return cb(err);\n                if (buf.length) {\n                    this._messageLength += buf.length;\n                    if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n                        const error = this.createError(RangeError, 'Max payload size exceeded', false, 1009, 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH');\n                        cb(error);\n                        return;\n                    }\n                    this._fragments.push(buf);\n                }\n                this.dataMessage(cb);\n                if (this._state === GET_INFO) this.startLoop(cb);\n            });\n        }\n        /**\n\t   * Handles a data message.\n\t   *\n\t   * @param {Function} cb Callback\n\t   * @private\n\t   */ dataMessage(cb) {\n            if (!this._fin) {\n                this._state = GET_INFO;\n                return;\n            }\n            const messageLength = this._messageLength;\n            const fragments = this._fragments;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragmented = 0;\n            this._fragments = [];\n            if (this._opcode === 2) {\n                let data;\n                if (this._binaryType === 'nodebuffer') {\n                    data = concat(fragments, messageLength);\n                } else if (this._binaryType === 'arraybuffer') {\n                    data = toArrayBuffer(concat(fragments, messageLength));\n                } else if (this._binaryType === 'blob') {\n                    data = new Blob(fragments);\n                } else {\n                    data = fragments;\n                }\n                if (this._allowSynchronousEvents) {\n                    this.emit('message', data, true);\n                    this._state = GET_INFO;\n                } else {\n                    this._state = DEFER_EVENT;\n                    setImmediate(()=>{\n                        this.emit('message', data, true);\n                        this._state = GET_INFO;\n                        this.startLoop(cb);\n                    });\n                }\n            } else {\n                const buf = concat(fragments, messageLength);\n                if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n                    const error = this.createError(Error, 'invalid UTF-8 sequence', true, 1007, 'WS_ERR_INVALID_UTF8');\n                    cb(error);\n                    return;\n                }\n                if (this._state === INFLATING || this._allowSynchronousEvents) {\n                    this.emit('message', buf, false);\n                    this._state = GET_INFO;\n                } else {\n                    this._state = DEFER_EVENT;\n                    setImmediate(()=>{\n                        this.emit('message', buf, false);\n                        this._state = GET_INFO;\n                        this.startLoop(cb);\n                    });\n                }\n            }\n        }\n        /**\n\t   * Handles a control message.\n\t   *\n\t   * @param {Buffer} data Data to handle\n\t   * @return {(Error|RangeError|undefined)} A possible error\n\t   * @private\n\t   */ controlMessage(data, cb) {\n            if (this._opcode === 0x08) {\n                if (data.length === 0) {\n                    this._loop = false;\n                    this.emit('conclude', 1005, EMPTY_BUFFER);\n                    this.end();\n                } else {\n                    const code = data.readUInt16BE(0);\n                    if (!isValidStatusCode(code)) {\n                        const error = this.createError(RangeError, `invalid status code ${code}`, true, 1002, 'WS_ERR_INVALID_CLOSE_CODE');\n                        cb(error);\n                        return;\n                    }\n                    const buf = new FastBuffer(data.buffer, data.byteOffset + 2, data.length - 2);\n                    if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n                        const error = this.createError(Error, 'invalid UTF-8 sequence', true, 1007, 'WS_ERR_INVALID_UTF8');\n                        cb(error);\n                        return;\n                    }\n                    this._loop = false;\n                    this.emit('conclude', code, buf);\n                    this.end();\n                }\n                this._state = GET_INFO;\n                return;\n            }\n            if (this._allowSynchronousEvents) {\n                this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n                this._state = GET_INFO;\n            } else {\n                this._state = DEFER_EVENT;\n                setImmediate(()=>{\n                    this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n                    this._state = GET_INFO;\n                    this.startLoop(cb);\n                });\n            }\n        }\n        /**\n\t   * Builds an error object.\n\t   *\n\t   * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n\t   * @param {String} message The error message\n\t   * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n\t   *     `message`\n\t   * @param {Number} statusCode The status code\n\t   * @param {String} errorCode The exposed error code\n\t   * @return {(Error|RangeError)} The error\n\t   * @private\n\t   */ createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n            this._loop = false;\n            this._errored = true;\n            const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);\n            Error.captureStackTrace(err, this.createError);\n            err.code = errorCode;\n            err[kStatusCode] = statusCode;\n            return err;\n        }\n    }\n    receiver = Receiver;\n    return receiver;\n}\nrequireReceiver();\n/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */ var sender;\nvar hasRequiredSender;\nfunction requireSender() {\n    if (hasRequiredSender) return sender;\n    hasRequiredSender = 1;\n    const { randomFillSync } = crypto__WEBPACK_IMPORTED_MODULE_3__;\n    const PerMessageDeflate = requirePermessageDeflate();\n    const { EMPTY_BUFFER, kWebSocket, NOOP } = requireConstants();\n    const { isBlob, isValidStatusCode } = requireValidation();\n    const { mask: applyMask, toBuffer } = requireBufferUtil();\n    const kByteLength = Symbol('kByteLength');\n    const maskBuffer = Buffer.alloc(4);\n    const RANDOM_POOL_SIZE = 8 * 1024;\n    let randomPool;\n    let randomPoolPointer = RANDOM_POOL_SIZE;\n    const DEFAULT = 0;\n    const DEFLATING = 1;\n    const GET_BLOB_DATA = 2;\n    /**\n\t * HyBi Sender implementation.\n\t */ class Sender {\n        /**\n\t   * Creates a Sender instance.\n\t   *\n\t   * @param {Duplex} socket The connection socket\n\t   * @param {Object} [extensions] An object containing the negotiated extensions\n\t   * @param {Function} [generateMask] The function used to generate the masking\n\t   *     key\n\t   */ constructor(socket, extensions, generateMask){\n            this._extensions = extensions || {};\n            if (generateMask) {\n                this._generateMask = generateMask;\n                this._maskBuffer = Buffer.alloc(4);\n            }\n            this._socket = socket;\n            this._firstFragment = true;\n            this._compress = false;\n            this._bufferedBytes = 0;\n            this._queue = [];\n            this._state = DEFAULT;\n            this.onerror = NOOP;\n            this[kWebSocket] = undefined;\n        }\n        /**\n\t   * Frames a piece of data according to the HyBi WebSocket protocol.\n\t   *\n\t   * @param {(Buffer|String)} data The data to frame\n\t   * @param {Object} options Options object\n\t   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n\t   *     FIN bit\n\t   * @param {Function} [options.generateMask] The function used to generate the\n\t   *     masking key\n\t   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n\t   *     `data`\n\t   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n\t   *     key\n\t   * @param {Number} options.opcode The opcode\n\t   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n\t   *     modified\n\t   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n\t   *     RSV1 bit\n\t   * @return {(Buffer|String)[]} The framed data\n\t   * @public\n\t   */ static frame(data, options) {\n            let mask;\n            let merge = false;\n            let offset = 2;\n            let skipMasking = false;\n            if (options.mask) {\n                mask = options.maskBuffer || maskBuffer;\n                if (options.generateMask) {\n                    options.generateMask(mask);\n                } else {\n                    if (randomPoolPointer === RANDOM_POOL_SIZE) {\n                        /* istanbul ignore else  */ if (randomPool === undefined) {\n                            //\n                            // This is lazily initialized because server-sent frames must not\n                            // be masked so it may never be used.\n                            //\n                            randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n                        }\n                        randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n                        randomPoolPointer = 0;\n                    }\n                    mask[0] = randomPool[randomPoolPointer++];\n                    mask[1] = randomPool[randomPoolPointer++];\n                    mask[2] = randomPool[randomPoolPointer++];\n                    mask[3] = randomPool[randomPoolPointer++];\n                }\n                skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n                offset = 6;\n            }\n            let dataLength;\n            if (typeof data === 'string') {\n                if ((!options.mask || skipMasking) && options[kByteLength] !== undefined) {\n                    dataLength = options[kByteLength];\n                } else {\n                    data = Buffer.from(data);\n                    dataLength = data.length;\n                }\n            } else {\n                dataLength = data.length;\n                merge = options.mask && options.readOnly && !skipMasking;\n            }\n            let payloadLength = dataLength;\n            if (dataLength >= 65536) {\n                offset += 8;\n                payloadLength = 127;\n            } else if (dataLength > 125) {\n                offset += 2;\n                payloadLength = 126;\n            }\n            const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n            target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n            if (options.rsv1) target[0] |= 0x40;\n            target[1] = payloadLength;\n            if (payloadLength === 126) {\n                target.writeUInt16BE(dataLength, 2);\n            } else if (payloadLength === 127) {\n                target[2] = target[3] = 0;\n                target.writeUIntBE(dataLength, 4, 6);\n            }\n            if (!options.mask) return [\n                target,\n                data\n            ];\n            target[1] |= 0x80;\n            target[offset - 4] = mask[0];\n            target[offset - 3] = mask[1];\n            target[offset - 2] = mask[2];\n            target[offset - 1] = mask[3];\n            if (skipMasking) return [\n                target,\n                data\n            ];\n            if (merge) {\n                applyMask(data, mask, target, offset, dataLength);\n                return [\n                    target\n                ];\n            }\n            applyMask(data, mask, data, 0, dataLength);\n            return [\n                target,\n                data\n            ];\n        }\n        /**\n\t   * Sends a close message to the other peer.\n\t   *\n\t   * @param {Number} [code] The status code component of the body\n\t   * @param {(String|Buffer)} [data] The message component of the body\n\t   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n\t   * @param {Function} [cb] Callback\n\t   * @public\n\t   */ close(code, data, mask, cb) {\n            let buf;\n            if (code === undefined) {\n                buf = EMPTY_BUFFER;\n            } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n                throw new TypeError('First argument must be a valid error code number');\n            } else if (data === undefined || !data.length) {\n                buf = Buffer.allocUnsafe(2);\n                buf.writeUInt16BE(code, 0);\n            } else {\n                const length = Buffer.byteLength(data);\n                if (length > 123) {\n                    throw new RangeError('The message must not be greater than 123 bytes');\n                }\n                buf = Buffer.allocUnsafe(2 + length);\n                buf.writeUInt16BE(code, 0);\n                if (typeof data === 'string') {\n                    buf.write(data, 2);\n                } else {\n                    buf.set(data, 2);\n                }\n            }\n            const options = {\n                [kByteLength]: buf.length,\n                fin: true,\n                generateMask: this._generateMask,\n                mask,\n                maskBuffer: this._maskBuffer,\n                opcode: 0x08,\n                readOnly: false,\n                rsv1: false\n            };\n            if (this._state !== DEFAULT) {\n                this.enqueue([\n                    this.dispatch,\n                    buf,\n                    false,\n                    options,\n                    cb\n                ]);\n            } else {\n                this.sendFrame(Sender.frame(buf, options), cb);\n            }\n        }\n        /**\n\t   * Sends a ping message to the other peer.\n\t   *\n\t   * @param {*} data The message to send\n\t   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n\t   * @param {Function} [cb] Callback\n\t   * @public\n\t   */ ping(data, mask, cb) {\n            let byteLength;\n            let readOnly;\n            if (typeof data === 'string') {\n                byteLength = Buffer.byteLength(data);\n                readOnly = false;\n            } else if (isBlob(data)) {\n                byteLength = data.size;\n                readOnly = false;\n            } else {\n                data = toBuffer(data);\n                byteLength = data.length;\n                readOnly = toBuffer.readOnly;\n            }\n            if (byteLength > 125) {\n                throw new RangeError('The data size must not be greater than 125 bytes');\n            }\n            const options = {\n                [kByteLength]: byteLength,\n                fin: true,\n                generateMask: this._generateMask,\n                mask,\n                maskBuffer: this._maskBuffer,\n                opcode: 0x09,\n                readOnly,\n                rsv1: false\n            };\n            if (isBlob(data)) {\n                if (this._state !== DEFAULT) {\n                    this.enqueue([\n                        this.getBlobData,\n                        data,\n                        false,\n                        options,\n                        cb\n                    ]);\n                } else {\n                    this.getBlobData(data, false, options, cb);\n                }\n            } else if (this._state !== DEFAULT) {\n                this.enqueue([\n                    this.dispatch,\n                    data,\n                    false,\n                    options,\n                    cb\n                ]);\n            } else {\n                this.sendFrame(Sender.frame(data, options), cb);\n            }\n        }\n        /**\n\t   * Sends a pong message to the other peer.\n\t   *\n\t   * @param {*} data The message to send\n\t   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n\t   * @param {Function} [cb] Callback\n\t   * @public\n\t   */ pong(data, mask, cb) {\n            let byteLength;\n            let readOnly;\n            if (typeof data === 'string') {\n                byteLength = Buffer.byteLength(data);\n                readOnly = false;\n            } else if (isBlob(data)) {\n                byteLength = data.size;\n                readOnly = false;\n            } else {\n                data = toBuffer(data);\n                byteLength = data.length;\n                readOnly = toBuffer.readOnly;\n            }\n            if (byteLength > 125) {\n                throw new RangeError('The data size must not be greater than 125 bytes');\n            }\n            const options = {\n                [kByteLength]: byteLength,\n                fin: true,\n                generateMask: this._generateMask,\n                mask,\n                maskBuffer: this._maskBuffer,\n                opcode: 0x0a,\n                readOnly,\n                rsv1: false\n            };\n            if (isBlob(data)) {\n                if (this._state !== DEFAULT) {\n                    this.enqueue([\n                        this.getBlobData,\n                        data,\n                        false,\n                        options,\n                        cb\n                    ]);\n                } else {\n                    this.getBlobData(data, false, options, cb);\n                }\n            } else if (this._state !== DEFAULT) {\n                this.enqueue([\n                    this.dispatch,\n                    data,\n                    false,\n                    options,\n                    cb\n                ]);\n            } else {\n                this.sendFrame(Sender.frame(data, options), cb);\n            }\n        }\n        /**\n\t   * Sends a data message to the other peer.\n\t   *\n\t   * @param {*} data The message to send\n\t   * @param {Object} options Options object\n\t   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n\t   *     or text\n\t   * @param {Boolean} [options.compress=false] Specifies whether or not to\n\t   *     compress `data`\n\t   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n\t   *     last one\n\t   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n\t   *     `data`\n\t   * @param {Function} [cb] Callback\n\t   * @public\n\t   */ send(data, options, cb) {\n            const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n            let opcode = options.binary ? 2 : 1;\n            let rsv1 = options.compress;\n            let byteLength;\n            let readOnly;\n            if (typeof data === 'string') {\n                byteLength = Buffer.byteLength(data);\n                readOnly = false;\n            } else if (isBlob(data)) {\n                byteLength = data.size;\n                readOnly = false;\n            } else {\n                data = toBuffer(data);\n                byteLength = data.length;\n                readOnly = toBuffer.readOnly;\n            }\n            if (this._firstFragment) {\n                this._firstFragment = false;\n                if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? 'server_no_context_takeover' : 'client_no_context_takeover']) {\n                    rsv1 = byteLength >= perMessageDeflate._threshold;\n                }\n                this._compress = rsv1;\n            } else {\n                rsv1 = false;\n                opcode = 0;\n            }\n            if (options.fin) this._firstFragment = true;\n            const opts = {\n                [kByteLength]: byteLength,\n                fin: options.fin,\n                generateMask: this._generateMask,\n                mask: options.mask,\n                maskBuffer: this._maskBuffer,\n                opcode,\n                readOnly,\n                rsv1\n            };\n            if (isBlob(data)) {\n                if (this._state !== DEFAULT) {\n                    this.enqueue([\n                        this.getBlobData,\n                        data,\n                        this._compress,\n                        opts,\n                        cb\n                    ]);\n                } else {\n                    this.getBlobData(data, this._compress, opts, cb);\n                }\n            } else if (this._state !== DEFAULT) {\n                this.enqueue([\n                    this.dispatch,\n                    data,\n                    this._compress,\n                    opts,\n                    cb\n                ]);\n            } else {\n                this.dispatch(data, this._compress, opts, cb);\n            }\n        }\n        /**\n\t   * Gets the contents of a blob as binary data.\n\t   *\n\t   * @param {Blob} blob The blob\n\t   * @param {Boolean} [compress=false] Specifies whether or not to compress\n\t   *     the data\n\t   * @param {Object} options Options object\n\t   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n\t   *     FIN bit\n\t   * @param {Function} [options.generateMask] The function used to generate the\n\t   *     masking key\n\t   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n\t   *     `data`\n\t   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n\t   *     key\n\t   * @param {Number} options.opcode The opcode\n\t   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n\t   *     modified\n\t   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n\t   *     RSV1 bit\n\t   * @param {Function} [cb] Callback\n\t   * @private\n\t   */ getBlobData(blob, compress, options, cb) {\n            this._bufferedBytes += options[kByteLength];\n            this._state = GET_BLOB_DATA;\n            blob.arrayBuffer().then((arrayBuffer)=>{\n                if (this._socket.destroyed) {\n                    const err = new Error('The socket was closed while the blob was being read');\n                    //\n                    // `callCallbacks` is called in the next tick to ensure that errors\n                    // that might be thrown in the callbacks behave like errors thrown\n                    // outside the promise chain.\n                    //\n                    process.nextTick(callCallbacks, this, err, cb);\n                    return;\n                }\n                this._bufferedBytes -= options[kByteLength];\n                const data = toBuffer(arrayBuffer);\n                if (!compress) {\n                    this._state = DEFAULT;\n                    this.sendFrame(Sender.frame(data, options), cb);\n                    this.dequeue();\n                } else {\n                    this.dispatch(data, compress, options, cb);\n                }\n            }).catch((err)=>{\n                //\n                // `onError` is called in the next tick for the same reason that\n                // `callCallbacks` above is.\n                //\n                process.nextTick(onError, this, err, cb);\n            });\n        }\n        /**\n\t   * Dispatches a message.\n\t   *\n\t   * @param {(Buffer|String)} data The message to send\n\t   * @param {Boolean} [compress=false] Specifies whether or not to compress\n\t   *     `data`\n\t   * @param {Object} options Options object\n\t   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n\t   *     FIN bit\n\t   * @param {Function} [options.generateMask] The function used to generate the\n\t   *     masking key\n\t   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n\t   *     `data`\n\t   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n\t   *     key\n\t   * @param {Number} options.opcode The opcode\n\t   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n\t   *     modified\n\t   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n\t   *     RSV1 bit\n\t   * @param {Function} [cb] Callback\n\t   * @private\n\t   */ dispatch(data, compress, options, cb) {\n            if (!compress) {\n                this.sendFrame(Sender.frame(data, options), cb);\n                return;\n            }\n            const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n            this._bufferedBytes += options[kByteLength];\n            this._state = DEFLATING;\n            perMessageDeflate.compress(data, options.fin, (_, buf)=>{\n                if (this._socket.destroyed) {\n                    const err = new Error('The socket was closed while data was being compressed');\n                    callCallbacks(this, err, cb);\n                    return;\n                }\n                this._bufferedBytes -= options[kByteLength];\n                this._state = DEFAULT;\n                options.readOnly = false;\n                this.sendFrame(Sender.frame(buf, options), cb);\n                this.dequeue();\n            });\n        }\n        /**\n\t   * Executes queued send operations.\n\t   *\n\t   * @private\n\t   */ dequeue() {\n            while(this._state === DEFAULT && this._queue.length){\n                const params = this._queue.shift();\n                this._bufferedBytes -= params[3][kByteLength];\n                Reflect.apply(params[0], this, params.slice(1));\n            }\n        }\n        /**\n\t   * Enqueues a send operation.\n\t   *\n\t   * @param {Array} params Send operation parameters.\n\t   * @private\n\t   */ enqueue(params) {\n            this._bufferedBytes += params[3][kByteLength];\n            this._queue.push(params);\n        }\n        /**\n\t   * Sends a frame.\n\t   *\n\t   * @param {Buffer[]} list The frame to send\n\t   * @param {Function} [cb] Callback\n\t   * @private\n\t   */ sendFrame(list, cb) {\n            if (list.length === 2) {\n                this._socket.cork();\n                this._socket.write(list[0]);\n                this._socket.write(list[1], cb);\n                this._socket.uncork();\n            } else {\n                this._socket.write(list[0], cb);\n            }\n        }\n    }\n    sender = Sender;\n    /**\n\t * Calls queued callbacks with an error.\n\t *\n\t * @param {Sender} sender The `Sender` instance\n\t * @param {Error} err The error to call the callbacks with\n\t * @param {Function} [cb] The first callback\n\t * @private\n\t */ function callCallbacks(sender, err, cb) {\n        if (typeof cb === 'function') cb(err);\n        for(let i = 0; i < sender._queue.length; i++){\n            const params = sender._queue[i];\n            const callback = params[params.length - 1];\n            if (typeof callback === 'function') callback(err);\n        }\n    }\n    /**\n\t * Handles a `Sender` error.\n\t *\n\t * @param {Sender} sender The `Sender` instance\n\t * @param {Error} err The error\n\t * @param {Function} [cb] The first pending callback\n\t * @private\n\t */ function onError(sender, err, cb) {\n        callCallbacks(sender, err, cb);\n        sender.onerror(err);\n    }\n    return sender;\n}\nrequireSender();\nvar eventTarget;\nvar hasRequiredEventTarget;\nfunction requireEventTarget() {\n    if (hasRequiredEventTarget) return eventTarget;\n    hasRequiredEventTarget = 1;\n    const { kForOnEventAttribute, kListener } = requireConstants();\n    const kCode = Symbol('kCode');\n    const kData = Symbol('kData');\n    const kError = Symbol('kError');\n    const kMessage = Symbol('kMessage');\n    const kReason = Symbol('kReason');\n    const kTarget = Symbol('kTarget');\n    const kType = Symbol('kType');\n    const kWasClean = Symbol('kWasClean');\n    /**\n\t * Class representing an event.\n\t */ class Event {\n        /**\n\t   * Create a new `Event`.\n\t   *\n\t   * @param {String} type The name of the event\n\t   * @throws {TypeError} If the `type` argument is not specified\n\t   */ constructor(type){\n            this[kTarget] = null;\n            this[kType] = type;\n        }\n        /**\n\t   * @type {*}\n\t   */ get target() {\n            return this[kTarget];\n        }\n        /**\n\t   * @type {String}\n\t   */ get type() {\n            return this[kType];\n        }\n    }\n    Object.defineProperty(Event.prototype, 'target', {\n        enumerable: true\n    });\n    Object.defineProperty(Event.prototype, 'type', {\n        enumerable: true\n    });\n    /**\n\t * Class representing a close event.\n\t *\n\t * @extends Event\n\t */ class CloseEvent extends Event {\n        /**\n\t   * Create a new `CloseEvent`.\n\t   *\n\t   * @param {String} type The name of the event\n\t   * @param {Object} [options] A dictionary object that allows for setting\n\t   *     attributes via object members of the same name\n\t   * @param {Number} [options.code=0] The status code explaining why the\n\t   *     connection was closed\n\t   * @param {String} [options.reason=''] A human-readable string explaining why\n\t   *     the connection was closed\n\t   * @param {Boolean} [options.wasClean=false] Indicates whether or not the\n\t   *     connection was cleanly closed\n\t   */ constructor(type, options = {}){\n            super(type);\n            this[kCode] = options.code === undefined ? 0 : options.code;\n            this[kReason] = options.reason === undefined ? '' : options.reason;\n            this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;\n        }\n        /**\n\t   * @type {Number}\n\t   */ get code() {\n            return this[kCode];\n        }\n        /**\n\t   * @type {String}\n\t   */ get reason() {\n            return this[kReason];\n        }\n        /**\n\t   * @type {Boolean}\n\t   */ get wasClean() {\n            return this[kWasClean];\n        }\n    }\n    Object.defineProperty(CloseEvent.prototype, 'code', {\n        enumerable: true\n    });\n    Object.defineProperty(CloseEvent.prototype, 'reason', {\n        enumerable: true\n    });\n    Object.defineProperty(CloseEvent.prototype, 'wasClean', {\n        enumerable: true\n    });\n    /**\n\t * Class representing an error event.\n\t *\n\t * @extends Event\n\t */ class ErrorEvent extends Event {\n        /**\n\t   * Create a new `ErrorEvent`.\n\t   *\n\t   * @param {String} type The name of the event\n\t   * @param {Object} [options] A dictionary object that allows for setting\n\t   *     attributes via object members of the same name\n\t   * @param {*} [options.error=null] The error that generated this event\n\t   * @param {String} [options.message=''] The error message\n\t   */ constructor(type, options = {}){\n            super(type);\n            this[kError] = options.error === undefined ? null : options.error;\n            this[kMessage] = options.message === undefined ? '' : options.message;\n        }\n        /**\n\t   * @type {*}\n\t   */ get error() {\n            return this[kError];\n        }\n        /**\n\t   * @type {String}\n\t   */ get message() {\n            return this[kMessage];\n        }\n    }\n    Object.defineProperty(ErrorEvent.prototype, 'error', {\n        enumerable: true\n    });\n    Object.defineProperty(ErrorEvent.prototype, 'message', {\n        enumerable: true\n    });\n    /**\n\t * Class representing a message event.\n\t *\n\t * @extends Event\n\t */ class MessageEvent extends Event {\n        /**\n\t   * Create a new `MessageEvent`.\n\t   *\n\t   * @param {String} type The name of the event\n\t   * @param {Object} [options] A dictionary object that allows for setting\n\t   *     attributes via object members of the same name\n\t   * @param {*} [options.data=null] The message content\n\t   */ constructor(type, options = {}){\n            super(type);\n            this[kData] = options.data === undefined ? null : options.data;\n        }\n        /**\n\t   * @type {*}\n\t   */ get data() {\n            return this[kData];\n        }\n    }\n    Object.defineProperty(MessageEvent.prototype, 'data', {\n        enumerable: true\n    });\n    /**\n\t * This provides methods for emulating the `EventTarget` interface. It's not\n\t * meant to be used directly.\n\t *\n\t * @mixin\n\t */ const EventTarget = {\n        /**\n\t   * Register an event listener.\n\t   *\n\t   * @param {String} type A string representing the event type to listen for\n\t   * @param {(Function|Object)} handler The listener to add\n\t   * @param {Object} [options] An options object specifies characteristics about\n\t   *     the event listener\n\t   * @param {Boolean} [options.once=false] A `Boolean` indicating that the\n\t   *     listener should be invoked at most once after being added. If `true`,\n\t   *     the listener would be automatically removed when invoked.\n\t   * @public\n\t   */ addEventListener (type, handler, options = {}) {\n            for (const listener of this.listeners(type)){\n                if (!options[kForOnEventAttribute] && listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n                    return;\n                }\n            }\n            let wrapper;\n            if (type === 'message') {\n                wrapper = function onMessage(data, isBinary) {\n                    const event = new MessageEvent('message', {\n                        data: isBinary ? data : data.toString()\n                    });\n                    event[kTarget] = this;\n                    callListener(handler, this, event);\n                };\n            } else if (type === 'close') {\n                wrapper = function onClose(code, message) {\n                    const event = new CloseEvent('close', {\n                        code,\n                        reason: message.toString(),\n                        wasClean: this._closeFrameReceived && this._closeFrameSent\n                    });\n                    event[kTarget] = this;\n                    callListener(handler, this, event);\n                };\n            } else if (type === 'error') {\n                wrapper = function onError(error) {\n                    const event = new ErrorEvent('error', {\n                        error,\n                        message: error.message\n                    });\n                    event[kTarget] = this;\n                    callListener(handler, this, event);\n                };\n            } else if (type === 'open') {\n                wrapper = function onOpen() {\n                    const event = new Event('open');\n                    event[kTarget] = this;\n                    callListener(handler, this, event);\n                };\n            } else {\n                return;\n            }\n            wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];\n            wrapper[kListener] = handler;\n            if (options.once) {\n                this.once(type, wrapper);\n            } else {\n                this.on(type, wrapper);\n            }\n        },\n        /**\n\t   * Remove an event listener.\n\t   *\n\t   * @param {String} type A string representing the event type to remove\n\t   * @param {(Function|Object)} handler The listener to remove\n\t   * @public\n\t   */ removeEventListener (type, handler) {\n            for (const listener of this.listeners(type)){\n                if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {\n                    this.removeListener(type, listener);\n                    break;\n                }\n            }\n        }\n    };\n    eventTarget = {\n        CloseEvent,\n        ErrorEvent,\n        Event,\n        EventTarget,\n        MessageEvent\n    };\n    /**\n\t * Call an event listener\n\t *\n\t * @param {(Function|Object)} listener The listener to call\n\t * @param {*} thisArg The value to use as `this`` when calling the listener\n\t * @param {Event} event The event to pass to the listener\n\t * @private\n\t */ function callListener(listener, thisArg, event) {\n        if (typeof listener === 'object' && listener.handleEvent) {\n            listener.handleEvent.call(listener, event);\n        } else {\n            listener.call(thisArg, event);\n        }\n    }\n    return eventTarget;\n}\nvar extension;\nvar hasRequiredExtension;\nfunction requireExtension() {\n    if (hasRequiredExtension) return extension;\n    hasRequiredExtension = 1;\n    const { tokenChars } = requireValidation();\n    /**\n\t * Adds an offer to the map of extension offers or a parameter to the map of\n\t * parameters.\n\t *\n\t * @param {Object} dest The map of extension offers or parameters\n\t * @param {String} name The extension or parameter name\n\t * @param {(Object|Boolean|String)} elem The extension parameters or the\n\t *     parameter value\n\t * @private\n\t */ function push(dest, name, elem) {\n        if (dest[name] === undefined) dest[name] = [\n            elem\n        ];\n        else dest[name].push(elem);\n    }\n    /**\n\t * Parses the `Sec-WebSocket-Extensions` header into an object.\n\t *\n\t * @param {String} header The field value of the header\n\t * @return {Object} The parsed object\n\t * @public\n\t */ function parse(header) {\n        const offers = Object.create(null);\n        let params = Object.create(null);\n        let mustUnescape = false;\n        let isEscaping = false;\n        let inQuotes = false;\n        let extensionName;\n        let paramName;\n        let start = -1;\n        let code = -1;\n        let end = -1;\n        let i = 0;\n        for(; i < header.length; i++){\n            code = header.charCodeAt(i);\n            if (extensionName === undefined) {\n                if (end === -1 && tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (i !== 0 && (code === 0x20 /* ' ' */  || code === 0x09)) {\n                    if (end === -1 && start !== -1) end = i;\n                } else if (code === 0x3b /* ';' */  || code === 0x2c /* ',' */ ) {\n                    if (start === -1) {\n                        throw new SyntaxError(`Unexpected character at index ${i}`);\n                    }\n                    if (end === -1) end = i;\n                    const name = header.slice(start, end);\n                    if (code === 0x2c) {\n                        push(offers, name, params);\n                        params = Object.create(null);\n                    } else {\n                        extensionName = name;\n                    }\n                    start = end = -1;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            } else if (paramName === undefined) {\n                if (end === -1 && tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (code === 0x20 || code === 0x09) {\n                    if (end === -1 && start !== -1) end = i;\n                } else if (code === 0x3b || code === 0x2c) {\n                    if (start === -1) {\n                        throw new SyntaxError(`Unexpected character at index ${i}`);\n                    }\n                    if (end === -1) end = i;\n                    push(params, header.slice(start, end), true);\n                    if (code === 0x2c) {\n                        push(offers, extensionName, params);\n                        params = Object.create(null);\n                        extensionName = undefined;\n                    }\n                    start = end = -1;\n                } else if (code === 0x3d /* '=' */  && start !== -1 && end === -1) {\n                    paramName = header.slice(start, i);\n                    start = end = -1;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            } else {\n                //\n                // The value of a quoted-string after unescaping must conform to the\n                // token ABNF, so only token characters are valid.\n                // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n                //\n                if (isEscaping) {\n                    if (tokenChars[code] !== 1) {\n                        throw new SyntaxError(`Unexpected character at index ${i}`);\n                    }\n                    if (start === -1) start = i;\n                    else if (!mustUnescape) mustUnescape = true;\n                    isEscaping = false;\n                } else if (inQuotes) {\n                    if (tokenChars[code] === 1) {\n                        if (start === -1) start = i;\n                    } else if (code === 0x22 /* '\"' */  && start !== -1) {\n                        inQuotes = false;\n                        end = i;\n                    } else if (code === 0x5c /* '\\' */ ) {\n                        isEscaping = true;\n                    } else {\n                        throw new SyntaxError(`Unexpected character at index ${i}`);\n                    }\n                } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n                    inQuotes = true;\n                } else if (end === -1 && tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n                    if (end === -1) end = i;\n                } else if (code === 0x3b || code === 0x2c) {\n                    if (start === -1) {\n                        throw new SyntaxError(`Unexpected character at index ${i}`);\n                    }\n                    if (end === -1) end = i;\n                    let value = header.slice(start, end);\n                    if (mustUnescape) {\n                        value = value.replace(/\\\\/g, '');\n                        mustUnescape = false;\n                    }\n                    push(params, paramName, value);\n                    if (code === 0x2c) {\n                        push(offers, extensionName, params);\n                        params = Object.create(null);\n                        extensionName = undefined;\n                    }\n                    paramName = undefined;\n                    start = end = -1;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            }\n        }\n        if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {\n            throw new SyntaxError('Unexpected end of input');\n        }\n        if (end === -1) end = i;\n        const token = header.slice(start, end);\n        if (extensionName === undefined) {\n            push(offers, token, params);\n        } else {\n            if (paramName === undefined) {\n                push(params, token, true);\n            } else if (mustUnescape) {\n                push(params, paramName, token.replace(/\\\\/g, ''));\n            } else {\n                push(params, paramName, token);\n            }\n            push(offers, extensionName, params);\n        }\n        return offers;\n    }\n    /**\n\t * Builds the `Sec-WebSocket-Extensions` header field value.\n\t *\n\t * @param {Object} extensions The map of extensions and parameters to format\n\t * @return {String} A string representing the given object\n\t * @public\n\t */ function format(extensions) {\n        return Object.keys(extensions).map((extension)=>{\n            let configurations = extensions[extension];\n            if (!Array.isArray(configurations)) configurations = [\n                configurations\n            ];\n            return configurations.map((params)=>{\n                return [\n                    extension\n                ].concat(Object.keys(params).map((k)=>{\n                    let values = params[k];\n                    if (!Array.isArray(values)) values = [\n                        values\n                    ];\n                    return values.map((v)=>v === true ? k : `${k}=${v}`).join('; ');\n                })).join('; ');\n            }).join(', ');\n        }).join(', ');\n    }\n    extension = {\n        format,\n        parse\n    };\n    return extension;\n}\n/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */ var websocket;\nvar hasRequiredWebsocket;\nfunction requireWebsocket() {\n    if (hasRequiredWebsocket) return websocket;\n    hasRequiredWebsocket = 1;\n    const EventEmitter = events__WEBPACK_IMPORTED_MODULE_4__;\n    const https = https__WEBPACK_IMPORTED_MODULE_5__;\n    const http = http__WEBPACK_IMPORTED_MODULE_6__;\n    const net = net__WEBPACK_IMPORTED_MODULE_7__;\n    const tls = tls__WEBPACK_IMPORTED_MODULE_8__;\n    const { randomBytes, createHash } = crypto__WEBPACK_IMPORTED_MODULE_3__;\n    const { URL: URL1 } = url__WEBPACK_IMPORTED_MODULE_9__;\n    const PerMessageDeflate = requirePermessageDeflate();\n    const Receiver = requireReceiver();\n    const Sender = requireSender();\n    const { isBlob } = requireValidation();\n    const { BINARY_TYPES, EMPTY_BUFFER, GUID, kForOnEventAttribute, kListener, kStatusCode, kWebSocket, NOOP } = requireConstants();\n    const { EventTarget: { addEventListener, removeEventListener } } = requireEventTarget();\n    const { format, parse } = requireExtension();\n    const { toBuffer } = requireBufferUtil();\n    const closeTimeout = 30 * 1000;\n    const kAborted = Symbol('kAborted');\n    const protocolVersions = [\n        8,\n        13\n    ];\n    const readyStates = [\n        'CONNECTING',\n        'OPEN',\n        'CLOSING',\n        'CLOSED'\n    ];\n    const subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n    /**\n\t * Class representing a WebSocket.\n\t *\n\t * @extends EventEmitter\n\t */ class WebSocket extends EventEmitter {\n        /**\n\t   * Create a new `WebSocket`.\n\t   *\n\t   * @param {(String|URL)} address The URL to which to connect\n\t   * @param {(String|String[])} [protocols] The subprotocols\n\t   * @param {Object} [options] Connection options\n\t   */ constructor(address, protocols, options){\n            super();\n            this._binaryType = BINARY_TYPES[0];\n            this._closeCode = 1006;\n            this._closeFrameReceived = false;\n            this._closeFrameSent = false;\n            this._closeMessage = EMPTY_BUFFER;\n            this._closeTimer = null;\n            this._errorEmitted = false;\n            this._extensions = {};\n            this._paused = false;\n            this._protocol = '';\n            this._readyState = WebSocket.CONNECTING;\n            this._receiver = null;\n            this._sender = null;\n            this._socket = null;\n            if (address !== null) {\n                this._bufferedAmount = 0;\n                this._isServer = false;\n                this._redirects = 0;\n                if (protocols === undefined) {\n                    protocols = [];\n                } else if (!Array.isArray(protocols)) {\n                    if (typeof protocols === 'object' && protocols !== null) {\n                        options = protocols;\n                        protocols = [];\n                    } else {\n                        protocols = [\n                            protocols\n                        ];\n                    }\n                }\n                initAsClient(this, address, protocols, options);\n            } else {\n                this._autoPong = options.autoPong;\n                this._isServer = true;\n            }\n        }\n        /**\n\t   * For historical reasons, the custom \"nodebuffer\" type is used by the default\n\t   * instead of \"blob\".\n\t   *\n\t   * @type {String}\n\t   */ get binaryType() {\n            return this._binaryType;\n        }\n        set binaryType(type) {\n            if (!BINARY_TYPES.includes(type)) return;\n            this._binaryType = type;\n            //\n            // Allow to change `binaryType` on the fly.\n            //\n            if (this._receiver) this._receiver._binaryType = type;\n        }\n        /**\n\t   * @type {Number}\n\t   */ get bufferedAmount() {\n            if (!this._socket) return this._bufferedAmount;\n            return this._socket._writableState.length + this._sender._bufferedBytes;\n        }\n        /**\n\t   * @type {String}\n\t   */ get extensions() {\n            return Object.keys(this._extensions).join();\n        }\n        /**\n\t   * @type {Boolean}\n\t   */ get isPaused() {\n            return this._paused;\n        }\n        /**\n\t   * @type {Function}\n\t   */ /* istanbul ignore next */ get onclose() {\n            return null;\n        }\n        /**\n\t   * @type {Function}\n\t   */ /* istanbul ignore next */ get onerror() {\n            return null;\n        }\n        /**\n\t   * @type {Function}\n\t   */ /* istanbul ignore next */ get onopen() {\n            return null;\n        }\n        /**\n\t   * @type {Function}\n\t   */ /* istanbul ignore next */ get onmessage() {\n            return null;\n        }\n        /**\n\t   * @type {String}\n\t   */ get protocol() {\n            return this._protocol;\n        }\n        /**\n\t   * @type {Number}\n\t   */ get readyState() {\n            return this._readyState;\n        }\n        /**\n\t   * @type {String}\n\t   */ get url() {\n            return this._url;\n        }\n        /**\n\t   * Set up the socket and the internal resources.\n\t   *\n\t   * @param {Duplex} socket The network socket between the server and client\n\t   * @param {Buffer} head The first packet of the upgraded stream\n\t   * @param {Object} options Options object\n\t   * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n\t   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n\t   *     multiple times in the same tick\n\t   * @param {Function} [options.generateMask] The function used to generate the\n\t   *     masking key\n\t   * @param {Number} [options.maxPayload=0] The maximum allowed message size\n\t   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n\t   *     not to skip UTF-8 validation for text and close messages\n\t   * @private\n\t   */ setSocket(socket, head, options) {\n            const receiver = new Receiver({\n                allowSynchronousEvents: options.allowSynchronousEvents,\n                binaryType: this.binaryType,\n                extensions: this._extensions,\n                isServer: this._isServer,\n                maxPayload: options.maxPayload,\n                skipUTF8Validation: options.skipUTF8Validation\n            });\n            const sender = new Sender(socket, this._extensions, options.generateMask);\n            this._receiver = receiver;\n            this._sender = sender;\n            this._socket = socket;\n            receiver[kWebSocket] = this;\n            sender[kWebSocket] = this;\n            socket[kWebSocket] = this;\n            receiver.on('conclude', receiverOnConclude);\n            receiver.on('drain', receiverOnDrain);\n            receiver.on('error', receiverOnError);\n            receiver.on('message', receiverOnMessage);\n            receiver.on('ping', receiverOnPing);\n            receiver.on('pong', receiverOnPong);\n            sender.onerror = senderOnError;\n            //\n            // These methods may not be available if `socket` is just a `Duplex`.\n            //\n            if (socket.setTimeout) socket.setTimeout(0);\n            if (socket.setNoDelay) socket.setNoDelay();\n            if (head.length > 0) socket.unshift(head);\n            socket.on('close', socketOnClose);\n            socket.on('data', socketOnData);\n            socket.on('end', socketOnEnd);\n            socket.on('error', socketOnError);\n            this._readyState = WebSocket.OPEN;\n            this.emit('open');\n        }\n        /**\n\t   * Emit the `'close'` event.\n\t   *\n\t   * @private\n\t   */ emitClose() {\n            if (!this._socket) {\n                this._readyState = WebSocket.CLOSED;\n                this.emit('close', this._closeCode, this._closeMessage);\n                return;\n            }\n            if (this._extensions[PerMessageDeflate.extensionName]) {\n                this._extensions[PerMessageDeflate.extensionName].cleanup();\n            }\n            this._receiver.removeAllListeners();\n            this._readyState = WebSocket.CLOSED;\n            this.emit('close', this._closeCode, this._closeMessage);\n        }\n        /**\n\t   * Start a closing handshake.\n\t   *\n\t   *          +----------+   +-----------+   +----------+\n\t   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n\t   *    |     +----------+   +-----------+   +----------+     |\n\t   *          +----------+   +-----------+         |\n\t   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n\t   *          +----------+   +-----------+   |\n\t   *    |           |                        |   +---+        |\n\t   *                +------------------------+-->|fin| - - - -\n\t   *    |         +---+                      |   +---+\n\t   *     - - - - -|fin|<---------------------+\n\t   *              +---+\n\t   *\n\t   * @param {Number} [code] Status code explaining why the connection is closing\n\t   * @param {(String|Buffer)} [data] The reason why the connection is\n\t   *     closing\n\t   * @public\n\t   */ close(code, data) {\n            if (this.readyState === WebSocket.CLOSED) return;\n            if (this.readyState === WebSocket.CONNECTING) {\n                const msg = 'WebSocket was closed before the connection was established';\n                abortHandshake(this, this._req, msg);\n                return;\n            }\n            if (this.readyState === WebSocket.CLOSING) {\n                if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n                    this._socket.end();\n                }\n                return;\n            }\n            this._readyState = WebSocket.CLOSING;\n            this._sender.close(code, data, !this._isServer, (err)=>{\n                //\n                // This error is handled by the `'error'` listener on the socket. We only\n                // want to know if the close frame has been sent here.\n                //\n                if (err) return;\n                this._closeFrameSent = true;\n                if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n                    this._socket.end();\n                }\n            });\n            setCloseTimer(this);\n        }\n        /**\n\t   * Pause the socket.\n\t   *\n\t   * @public\n\t   */ pause() {\n            if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {\n                return;\n            }\n            this._paused = true;\n            this._socket.pause();\n        }\n        /**\n\t   * Send a ping.\n\t   *\n\t   * @param {*} [data] The data to send\n\t   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n\t   * @param {Function} [cb] Callback which is executed when the ping is sent\n\t   * @public\n\t   */ ping(data, mask, cb) {\n            if (this.readyState === WebSocket.CONNECTING) {\n                throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n            }\n            if (typeof data === 'function') {\n                cb = data;\n                data = mask = undefined;\n            } else if (typeof mask === 'function') {\n                cb = mask;\n                mask = undefined;\n            }\n            if (typeof data === 'number') data = data.toString();\n            if (this.readyState !== WebSocket.OPEN) {\n                sendAfterClose(this, data, cb);\n                return;\n            }\n            if (mask === undefined) mask = !this._isServer;\n            this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n        }\n        /**\n\t   * Send a pong.\n\t   *\n\t   * @param {*} [data] The data to send\n\t   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n\t   * @param {Function} [cb] Callback which is executed when the pong is sent\n\t   * @public\n\t   */ pong(data, mask, cb) {\n            if (this.readyState === WebSocket.CONNECTING) {\n                throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n            }\n            if (typeof data === 'function') {\n                cb = data;\n                data = mask = undefined;\n            } else if (typeof mask === 'function') {\n                cb = mask;\n                mask = undefined;\n            }\n            if (typeof data === 'number') data = data.toString();\n            if (this.readyState !== WebSocket.OPEN) {\n                sendAfterClose(this, data, cb);\n                return;\n            }\n            if (mask === undefined) mask = !this._isServer;\n            this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n        }\n        /**\n\t   * Resume the socket.\n\t   *\n\t   * @public\n\t   */ resume() {\n            if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {\n                return;\n            }\n            this._paused = false;\n            if (!this._receiver._writableState.needDrain) this._socket.resume();\n        }\n        /**\n\t   * Send a data message.\n\t   *\n\t   * @param {*} data The message to send\n\t   * @param {Object} [options] Options object\n\t   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n\t   *     text\n\t   * @param {Boolean} [options.compress] Specifies whether or not to compress\n\t   *     `data`\n\t   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n\t   *     last one\n\t   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n\t   * @param {Function} [cb] Callback which is executed when data is written out\n\t   * @public\n\t   */ send(data, options, cb) {\n            if (this.readyState === WebSocket.CONNECTING) {\n                throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n            }\n            if (typeof options === 'function') {\n                cb = options;\n                options = {};\n            }\n            if (typeof data === 'number') data = data.toString();\n            if (this.readyState !== WebSocket.OPEN) {\n                sendAfterClose(this, data, cb);\n                return;\n            }\n            const opts = {\n                binary: typeof data !== 'string',\n                mask: !this._isServer,\n                compress: true,\n                fin: true,\n                ...options\n            };\n            if (!this._extensions[PerMessageDeflate.extensionName]) {\n                opts.compress = false;\n            }\n            this._sender.send(data || EMPTY_BUFFER, opts, cb);\n        }\n        /**\n\t   * Forcibly close the connection.\n\t   *\n\t   * @public\n\t   */ terminate() {\n            if (this.readyState === WebSocket.CLOSED) return;\n            if (this.readyState === WebSocket.CONNECTING) {\n                const msg = 'WebSocket was closed before the connection was established';\n                abortHandshake(this, this._req, msg);\n                return;\n            }\n            if (this._socket) {\n                this._readyState = WebSocket.CLOSING;\n                this._socket.destroy();\n            }\n        }\n    }\n    /**\n\t * @constant {Number} CONNECTING\n\t * @memberof WebSocket\n\t */ Object.defineProperty(WebSocket, 'CONNECTING', {\n        enumerable: true,\n        value: readyStates.indexOf('CONNECTING')\n    });\n    /**\n\t * @constant {Number} CONNECTING\n\t * @memberof WebSocket.prototype\n\t */ Object.defineProperty(WebSocket.prototype, 'CONNECTING', {\n        enumerable: true,\n        value: readyStates.indexOf('CONNECTING')\n    });\n    /**\n\t * @constant {Number} OPEN\n\t * @memberof WebSocket\n\t */ Object.defineProperty(WebSocket, 'OPEN', {\n        enumerable: true,\n        value: readyStates.indexOf('OPEN')\n    });\n    /**\n\t * @constant {Number} OPEN\n\t * @memberof WebSocket.prototype\n\t */ Object.defineProperty(WebSocket.prototype, 'OPEN', {\n        enumerable: true,\n        value: readyStates.indexOf('OPEN')\n    });\n    /**\n\t * @constant {Number} CLOSING\n\t * @memberof WebSocket\n\t */ Object.defineProperty(WebSocket, 'CLOSING', {\n        enumerable: true,\n        value: readyStates.indexOf('CLOSING')\n    });\n    /**\n\t * @constant {Number} CLOSING\n\t * @memberof WebSocket.prototype\n\t */ Object.defineProperty(WebSocket.prototype, 'CLOSING', {\n        enumerable: true,\n        value: readyStates.indexOf('CLOSING')\n    });\n    /**\n\t * @constant {Number} CLOSED\n\t * @memberof WebSocket\n\t */ Object.defineProperty(WebSocket, 'CLOSED', {\n        enumerable: true,\n        value: readyStates.indexOf('CLOSED')\n    });\n    /**\n\t * @constant {Number} CLOSED\n\t * @memberof WebSocket.prototype\n\t */ Object.defineProperty(WebSocket.prototype, 'CLOSED', {\n        enumerable: true,\n        value: readyStates.indexOf('CLOSED')\n    });\n    [\n        'binaryType',\n        'bufferedAmount',\n        'extensions',\n        'isPaused',\n        'protocol',\n        'readyState',\n        'url'\n    ].forEach((property)=>{\n        Object.defineProperty(WebSocket.prototype, property, {\n            enumerable: true\n        });\n    });\n    //\n    // Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n    // See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n    //\n    [\n        'open',\n        'error',\n        'close',\n        'message'\n    ].forEach((method)=>{\n        Object.defineProperty(WebSocket.prototype, `on${method}`, {\n            enumerable: true,\n            get () {\n                for (const listener of this.listeners(method)){\n                    if (listener[kForOnEventAttribute]) return listener[kListener];\n                }\n                return null;\n            },\n            set (handler) {\n                for (const listener of this.listeners(method)){\n                    if (listener[kForOnEventAttribute]) {\n                        this.removeListener(method, listener);\n                        break;\n                    }\n                }\n                if (typeof handler !== 'function') return;\n                this.addEventListener(method, handler, {\n                    [kForOnEventAttribute]: true\n                });\n            }\n        });\n    });\n    WebSocket.prototype.addEventListener = addEventListener;\n    WebSocket.prototype.removeEventListener = removeEventListener;\n    websocket = WebSocket;\n    /**\n\t * Initialize a WebSocket client.\n\t *\n\t * @param {WebSocket} websocket The client to initialize\n\t * @param {(String|URL)} address The URL to which to connect\n\t * @param {Array} protocols The subprotocols\n\t * @param {Object} [options] Connection options\n\t * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\n\t *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n\t *     times in the same tick\n\t * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n\t *     automatically send a pong in response to a ping\n\t * @param {Function} [options.finishRequest] A function which can be used to\n\t *     customize the headers of each http request before it is sent\n\t * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n\t *     redirects\n\t * @param {Function} [options.generateMask] The function used to generate the\n\t *     masking key\n\t * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n\t *     handshake request\n\t * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n\t *     size\n\t * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n\t *     allowed\n\t * @param {String} [options.origin] Value of the `Origin` or\n\t *     `Sec-WebSocket-Origin` header\n\t * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n\t *     permessage-deflate\n\t * @param {Number} [options.protocolVersion=13] Value of the\n\t *     `Sec-WebSocket-Version` header\n\t * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n\t *     not to skip UTF-8 validation for text and close messages\n\t * @private\n\t */ function initAsClient(websocket, address, protocols, options) {\n        const opts = {\n            allowSynchronousEvents: true,\n            autoPong: true,\n            protocolVersion: protocolVersions[1],\n            maxPayload: 100 * 1024 * 1024,\n            skipUTF8Validation: false,\n            perMessageDeflate: true,\n            followRedirects: false,\n            maxRedirects: 10,\n            ...options,\n            socketPath: undefined,\n            hostname: undefined,\n            protocol: undefined,\n            timeout: undefined,\n            method: 'GET',\n            host: undefined,\n            path: undefined,\n            port: undefined\n        };\n        websocket._autoPong = opts.autoPong;\n        if (!protocolVersions.includes(opts.protocolVersion)) {\n            throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);\n        }\n        let parsedUrl;\n        if (address instanceof URL1) {\n            parsedUrl = address;\n        } else {\n            try {\n                parsedUrl = new URL1(address);\n            } catch (e) {\n                throw new SyntaxError(`Invalid URL: ${address}`);\n            }\n        }\n        if (parsedUrl.protocol === 'http:') {\n            parsedUrl.protocol = 'ws:';\n        } else if (parsedUrl.protocol === 'https:') {\n            parsedUrl.protocol = 'wss:';\n        }\n        websocket._url = parsedUrl.href;\n        const isSecure = parsedUrl.protocol === 'wss:';\n        const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n        let invalidUrlMessage;\n        if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n            invalidUrlMessage = 'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' + '\"http:\", \"https\", or \"ws+unix:\"';\n        } else if (isIpcUrl && !parsedUrl.pathname) {\n            invalidUrlMessage = \"The URL's pathname is empty\";\n        } else if (parsedUrl.hash) {\n            invalidUrlMessage = 'The URL contains a fragment identifier';\n        }\n        if (invalidUrlMessage) {\n            const err = new SyntaxError(invalidUrlMessage);\n            if (websocket._redirects === 0) {\n                throw err;\n            } else {\n                emitErrorAndClose(websocket, err);\n                return;\n            }\n        }\n        const defaultPort = isSecure ? 443 : 80;\n        const key = randomBytes(16).toString('base64');\n        const request = isSecure ? https.request : http.request;\n        const protocolSet = new Set();\n        let perMessageDeflate;\n        opts.createConnection = opts.createConnection || (isSecure ? tlsConnect : netConnect);\n        opts.defaultPort = opts.defaultPort || defaultPort;\n        opts.port = parsedUrl.port || defaultPort;\n        opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n        opts.headers = {\n            ...opts.headers,\n            'Sec-WebSocket-Version': opts.protocolVersion,\n            'Sec-WebSocket-Key': key,\n            Connection: 'Upgrade',\n            Upgrade: 'websocket'\n        };\n        opts.path = parsedUrl.pathname + parsedUrl.search;\n        opts.timeout = opts.handshakeTimeout;\n        if (opts.perMessageDeflate) {\n            perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n            opts.headers['Sec-WebSocket-Extensions'] = format({\n                [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n            });\n        }\n        if (protocols.length) {\n            for (const protocol of protocols){\n                if (typeof protocol !== 'string' || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {\n                    throw new SyntaxError('An invalid or duplicated subprotocol was specified');\n                }\n                protocolSet.add(protocol);\n            }\n            opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n        }\n        if (opts.origin) {\n            if (opts.protocolVersion < 13) {\n                opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n            } else {\n                opts.headers.Origin = opts.origin;\n            }\n        }\n        if (parsedUrl.username || parsedUrl.password) {\n            opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n        }\n        if (isIpcUrl) {\n            const parts = opts.path.split(':');\n            opts.socketPath = parts[0];\n            opts.path = parts[1];\n        }\n        let req;\n        if (opts.followRedirects) {\n            if (websocket._redirects === 0) {\n                websocket._originalIpc = isIpcUrl;\n                websocket._originalSecure = isSecure;\n                websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;\n                const headers = options && options.headers;\n                //\n                // Shallow copy the user provided options so that headers can be changed\n                // without mutating the original object.\n                //\n                options = {\n                    ...options,\n                    headers: {}\n                };\n                if (headers) {\n                    for (const [key, value] of Object.entries(headers)){\n                        options.headers[key.toLowerCase()] = value;\n                    }\n                }\n            } else if (websocket.listenerCount('redirect') === 0) {\n                const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;\n                if (!isSameHost || websocket._originalSecure && !isSecure) {\n                    //\n                    // Match curl 7.77.0 behavior and drop the following headers. These\n                    // headers are also dropped when following a redirect to a subdomain.\n                    //\n                    delete opts.headers.authorization;\n                    delete opts.headers.cookie;\n                    if (!isSameHost) delete opts.headers.host;\n                    opts.auth = undefined;\n                }\n            }\n            //\n            // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n            // If the `Authorization` header is set, then there is nothing to do as it\n            // will take precedence.\n            //\n            if (opts.auth && !options.headers.authorization) {\n                options.headers.authorization = 'Basic ' + Buffer.from(opts.auth).toString('base64');\n            }\n            req = websocket._req = request(opts);\n            if (websocket._redirects) {\n                //\n                // Unlike what is done for the `'upgrade'` event, no early exit is\n                // triggered here if the user calls `websocket.close()` or\n                // `websocket.terminate()` from a listener of the `'redirect'` event. This\n                // is because the user can also call `request.destroy()` with an error\n                // before calling `websocket.close()` or `websocket.terminate()` and this\n                // would result in an error being emitted on the `request` object with no\n                // `'error'` event listeners attached.\n                //\n                websocket.emit('redirect', websocket.url, req);\n            }\n        } else {\n            req = websocket._req = request(opts);\n        }\n        if (opts.timeout) {\n            req.on('timeout', ()=>{\n                abortHandshake(websocket, req, 'Opening handshake has timed out');\n            });\n        }\n        req.on('error', (err)=>{\n            if (req === null || req[kAborted]) return;\n            req = websocket._req = null;\n            emitErrorAndClose(websocket, err);\n        });\n        req.on('response', (res)=>{\n            const location = res.headers.location;\n            const statusCode = res.statusCode;\n            if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n                if (++websocket._redirects > opts.maxRedirects) {\n                    abortHandshake(websocket, req, 'Maximum redirects exceeded');\n                    return;\n                }\n                req.abort();\n                let addr;\n                try {\n                    addr = new URL1(location, address);\n                } catch (e) {\n                    const err = new SyntaxError(`Invalid URL: ${location}`);\n                    emitErrorAndClose(websocket, err);\n                    return;\n                }\n                initAsClient(websocket, addr, protocols, options);\n            } else if (!websocket.emit('unexpected-response', req, res)) {\n                abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n            }\n        });\n        req.on('upgrade', (res, socket, head)=>{\n            websocket.emit('upgrade', res);\n            //\n            // The user may have closed the connection from a listener of the\n            // `'upgrade'` event.\n            //\n            if (websocket.readyState !== WebSocket.CONNECTING) return;\n            req = websocket._req = null;\n            const upgrade = res.headers.upgrade;\n            if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n                abortHandshake(websocket, socket, 'Invalid Upgrade header');\n                return;\n            }\n            const digest = createHash('sha1').update(key + GUID).digest('base64');\n            if (res.headers['sec-websocket-accept'] !== digest) {\n                abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n                return;\n            }\n            const serverProt = res.headers['sec-websocket-protocol'];\n            let protError;\n            if (serverProt !== undefined) {\n                if (!protocolSet.size) {\n                    protError = 'Server sent a subprotocol but none was requested';\n                } else if (!protocolSet.has(serverProt)) {\n                    protError = 'Server sent an invalid subprotocol';\n                }\n            } else if (protocolSet.size) {\n                protError = 'Server sent no subprotocol';\n            }\n            if (protError) {\n                abortHandshake(websocket, socket, protError);\n                return;\n            }\n            if (serverProt) websocket._protocol = serverProt;\n            const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n            if (secWebSocketExtensions !== undefined) {\n                if (!perMessageDeflate) {\n                    const message = 'Server sent a Sec-WebSocket-Extensions header but no extension ' + 'was requested';\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                let extensions;\n                try {\n                    extensions = parse(secWebSocketExtensions);\n                } catch (err) {\n                    const message = 'Invalid Sec-WebSocket-Extensions header';\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                const extensionNames = Object.keys(extensions);\n                if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n                    const message = 'Server indicated an extension that was not requested';\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                try {\n                    perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n                } catch (err) {\n                    const message = 'Invalid Sec-WebSocket-Extensions header';\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n            }\n            websocket.setSocket(socket, head, {\n                allowSynchronousEvents: opts.allowSynchronousEvents,\n                generateMask: opts.generateMask,\n                maxPayload: opts.maxPayload,\n                skipUTF8Validation: opts.skipUTF8Validation\n            });\n        });\n        if (opts.finishRequest) {\n            opts.finishRequest(req, websocket);\n        } else {\n            req.end();\n        }\n    }\n    /**\n\t * Emit the `'error'` and `'close'` events.\n\t *\n\t * @param {WebSocket} websocket The WebSocket instance\n\t * @param {Error} The error to emit\n\t * @private\n\t */ function emitErrorAndClose(websocket, err) {\n        websocket._readyState = WebSocket.CLOSING;\n        //\n        // The following assignment is practically useless and is done only for\n        // consistency.\n        //\n        websocket._errorEmitted = true;\n        websocket.emit('error', err);\n        websocket.emitClose();\n    }\n    /**\n\t * Create a `net.Socket` and initiate a connection.\n\t *\n\t * @param {Object} options Connection options\n\t * @return {net.Socket} The newly created socket used to start the connection\n\t * @private\n\t */ function netConnect(options) {\n        options.path = options.socketPath;\n        return net.connect(options);\n    }\n    /**\n\t * Create a `tls.TLSSocket` and initiate a connection.\n\t *\n\t * @param {Object} options Connection options\n\t * @return {tls.TLSSocket} The newly created socket used to start the connection\n\t * @private\n\t */ function tlsConnect(options) {\n        options.path = undefined;\n        if (!options.servername && options.servername !== '') {\n            options.servername = net.isIP(options.host) ? '' : options.host;\n        }\n        return tls.connect(options);\n    }\n    /**\n\t * Abort the handshake and emit an error.\n\t *\n\t * @param {WebSocket} websocket The WebSocket instance\n\t * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n\t *     abort or the socket to destroy\n\t * @param {String} message The error message\n\t * @private\n\t */ function abortHandshake(websocket, stream, message) {\n        websocket._readyState = WebSocket.CLOSING;\n        const err = new Error(message);\n        Error.captureStackTrace(err, abortHandshake);\n        if (stream.setHeader) {\n            stream[kAborted] = true;\n            stream.abort();\n            if (stream.socket && !stream.socket.destroyed) {\n                //\n                // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n                // called after the request completed. See\n                // https://github.com/websockets/ws/issues/1869.\n                //\n                stream.socket.destroy();\n            }\n            process.nextTick(emitErrorAndClose, websocket, err);\n        } else {\n            stream.destroy(err);\n            stream.once('error', websocket.emit.bind(websocket, 'error'));\n            stream.once('close', websocket.emitClose.bind(websocket));\n        }\n    }\n    /**\n\t * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n\t * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n\t *\n\t * @param {WebSocket} websocket The WebSocket instance\n\t * @param {*} [data] The data to send\n\t * @param {Function} [cb] Callback\n\t * @private\n\t */ function sendAfterClose(websocket, data, cb) {\n        if (data) {\n            const length = isBlob(data) ? data.size : toBuffer(data).length;\n            //\n            // The `_bufferedAmount` property is used only when the peer is a client and\n            // the opening handshake fails. Under these circumstances, in fact, the\n            // `setSocket()` method is not called, so the `_socket` and `_sender`\n            // properties are set to `null`.\n            //\n            if (websocket._socket) websocket._sender._bufferedBytes += length;\n            else websocket._bufferedAmount += length;\n        }\n        if (cb) {\n            const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n            process.nextTick(cb, err);\n        }\n    }\n    /**\n\t * The listener of the `Receiver` `'conclude'` event.\n\t *\n\t * @param {Number} code The status code\n\t * @param {Buffer} reason The reason for closing\n\t * @private\n\t */ function receiverOnConclude(code, reason) {\n        const websocket = this[kWebSocket];\n        websocket._closeFrameReceived = true;\n        websocket._closeMessage = reason;\n        websocket._closeCode = code;\n        if (websocket._socket[kWebSocket] === undefined) return;\n        websocket._socket.removeListener('data', socketOnData);\n        process.nextTick(resume, websocket._socket);\n        if (code === 1005) websocket.close();\n        else websocket.close(code, reason);\n    }\n    /**\n\t * The listener of the `Receiver` `'drain'` event.\n\t *\n\t * @private\n\t */ function receiverOnDrain() {\n        const websocket = this[kWebSocket];\n        if (!websocket.isPaused) websocket._socket.resume();\n    }\n    /**\n\t * The listener of the `Receiver` `'error'` event.\n\t *\n\t * @param {(RangeError|Error)} err The emitted error\n\t * @private\n\t */ function receiverOnError(err) {\n        const websocket = this[kWebSocket];\n        if (websocket._socket[kWebSocket] !== undefined) {\n            websocket._socket.removeListener('data', socketOnData);\n            //\n            // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n            // https://github.com/websockets/ws/issues/1940.\n            //\n            process.nextTick(resume, websocket._socket);\n            websocket.close(err[kStatusCode]);\n        }\n        if (!websocket._errorEmitted) {\n            websocket._errorEmitted = true;\n            websocket.emit('error', err);\n        }\n    }\n    /**\n\t * The listener of the `Receiver` `'finish'` event.\n\t *\n\t * @private\n\t */ function receiverOnFinish() {\n        this[kWebSocket].emitClose();\n    }\n    /**\n\t * The listener of the `Receiver` `'message'` event.\n\t *\n\t * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n\t * @param {Boolean} isBinary Specifies whether the message is binary or not\n\t * @private\n\t */ function receiverOnMessage(data, isBinary) {\n        this[kWebSocket].emit('message', data, isBinary);\n    }\n    /**\n\t * The listener of the `Receiver` `'ping'` event.\n\t *\n\t * @param {Buffer} data The data included in the ping frame\n\t * @private\n\t */ function receiverOnPing(data) {\n        const websocket = this[kWebSocket];\n        if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n        websocket.emit('ping', data);\n    }\n    /**\n\t * The listener of the `Receiver` `'pong'` event.\n\t *\n\t * @param {Buffer} data The data included in the pong frame\n\t * @private\n\t */ function receiverOnPong(data) {\n        this[kWebSocket].emit('pong', data);\n    }\n    /**\n\t * Resume a readable stream\n\t *\n\t * @param {Readable} stream The readable stream\n\t * @private\n\t */ function resume(stream) {\n        stream.resume();\n    }\n    /**\n\t * The `Sender` error event handler.\n\t *\n\t * @param {Error} The error\n\t * @private\n\t */ function senderOnError(err) {\n        const websocket = this[kWebSocket];\n        if (websocket.readyState === WebSocket.CLOSED) return;\n        if (websocket.readyState === WebSocket.OPEN) {\n            websocket._readyState = WebSocket.CLOSING;\n            setCloseTimer(websocket);\n        }\n        //\n        // `socket.end()` is used instead of `socket.destroy()` to allow the other\n        // peer to finish sending queued data. There is no need to set a timer here\n        // because `CLOSING` means that it is already set or not needed.\n        //\n        this._socket.end();\n        if (!websocket._errorEmitted) {\n            websocket._errorEmitted = true;\n            websocket.emit('error', err);\n        }\n    }\n    /**\n\t * Set a timer to destroy the underlying raw socket of a WebSocket.\n\t *\n\t * @param {WebSocket} websocket The WebSocket instance\n\t * @private\n\t */ function setCloseTimer(websocket) {\n        websocket._closeTimer = setTimeout(websocket._socket.destroy.bind(websocket._socket), closeTimeout);\n    }\n    /**\n\t * The listener of the socket `'close'` event.\n\t *\n\t * @private\n\t */ function socketOnClose() {\n        const websocket = this[kWebSocket];\n        this.removeListener('close', socketOnClose);\n        this.removeListener('data', socketOnData);\n        this.removeListener('end', socketOnEnd);\n        websocket._readyState = WebSocket.CLOSING;\n        let chunk;\n        //\n        // The close frame might not have been received or the `'end'` event emitted,\n        // for example, if the socket was destroyed due to an error. Ensure that the\n        // `receiver` stream is closed after writing any remaining buffered data to\n        // it. If the readable side of the socket is in flowing mode then there is no\n        // buffered data as everything has been already written and `readable.read()`\n        // will return `null`. If instead, the socket is paused, any possible buffered\n        // data will be read as a single chunk.\n        //\n        if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n            websocket._receiver.write(chunk);\n        }\n        websocket._receiver.end();\n        this[kWebSocket] = undefined;\n        clearTimeout(websocket._closeTimer);\n        if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n            websocket.emitClose();\n        } else {\n            websocket._receiver.on('error', receiverOnFinish);\n            websocket._receiver.on('finish', receiverOnFinish);\n        }\n    }\n    /**\n\t * The listener of the socket `'data'` event.\n\t *\n\t * @param {Buffer} chunk A chunk of data\n\t * @private\n\t */ function socketOnData(chunk) {\n        if (!this[kWebSocket]._receiver.write(chunk)) {\n            this.pause();\n        }\n    }\n    /**\n\t * The listener of the socket `'end'` event.\n\t *\n\t * @private\n\t */ function socketOnEnd() {\n        const websocket = this[kWebSocket];\n        websocket._readyState = WebSocket.CLOSING;\n        websocket._receiver.end();\n        this.end();\n    }\n    /**\n\t * The listener of the socket `'error'` event.\n\t *\n\t * @private\n\t */ function socketOnError() {\n        const websocket = this[kWebSocket];\n        this.removeListener('error', socketOnError);\n        this.on('error', NOOP);\n        if (websocket) {\n            websocket._readyState = WebSocket.CLOSING;\n            this.destroy();\n        }\n    }\n    return websocket;\n}\nvar websocketExports = requireWebsocket();\nvar WS = /*@__PURE__*/ getDefaultExportFromCjs(websocketExports);\nvar subprotocol;\nvar hasRequiredSubprotocol;\nfunction requireSubprotocol() {\n    if (hasRequiredSubprotocol) return subprotocol;\n    hasRequiredSubprotocol = 1;\n    const { tokenChars } = requireValidation();\n    /**\n\t * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.\n\t *\n\t * @param {String} header The field value of the header\n\t * @return {Set} The subprotocol names\n\t * @public\n\t */ function parse(header) {\n        const protocols = new Set();\n        let start = -1;\n        let end = -1;\n        let i = 0;\n        for(i; i < header.length; i++){\n            const code = header.charCodeAt(i);\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (i !== 0 && (code === 0x20 /* ' ' */  || code === 0x09)) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x2c /* ',' */ ) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                const protocol = header.slice(start, end);\n                if (protocols.has(protocol)) {\n                    throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n                }\n                protocols.add(protocol);\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        }\n        if (start === -1 || end !== -1) {\n            throw new SyntaxError('Unexpected end of input');\n        }\n        const protocol = header.slice(start, i);\n        if (protocols.has(protocol)) {\n            throw new SyntaxError(`The \"${protocol}\" subprotocol is duplicated`);\n        }\n        protocols.add(protocol);\n        return protocols;\n    }\n    subprotocol = {\n        parse\n    };\n    return subprotocol;\n}\n/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */ var websocketServer;\nvar hasRequiredWebsocketServer;\nfunction requireWebsocketServer() {\n    if (hasRequiredWebsocketServer) return websocketServer;\n    hasRequiredWebsocketServer = 1;\n    const EventEmitter = events__WEBPACK_IMPORTED_MODULE_4__;\n    const http = http__WEBPACK_IMPORTED_MODULE_6__;\n    const { createHash } = crypto__WEBPACK_IMPORTED_MODULE_3__;\n    const extension = requireExtension();\n    const PerMessageDeflate = requirePermessageDeflate();\n    const subprotocol = requireSubprotocol();\n    const WebSocket = requireWebsocket();\n    const { GUID, kWebSocket } = requireConstants();\n    const keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n    const RUNNING = 0;\n    const CLOSING = 1;\n    const CLOSED = 2;\n    /**\n\t * Class representing a WebSocket server.\n\t *\n\t * @extends EventEmitter\n\t */ class WebSocketServer extends EventEmitter {\n        /**\n\t   * Create a `WebSocketServer` instance.\n\t   *\n\t   * @param {Object} options Configuration options\n\t   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n\t   *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n\t   *     multiple times in the same tick\n\t   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n\t   *     automatically send a pong in response to a ping\n\t   * @param {Number} [options.backlog=511] The maximum length of the queue of\n\t   *     pending connections\n\t   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n\t   *     track clients\n\t   * @param {Function} [options.handleProtocols] A hook to handle protocols\n\t   * @param {String} [options.host] The hostname where to bind the server\n\t   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n\t   *     size\n\t   * @param {Boolean} [options.noServer=false] Enable no server mode\n\t   * @param {String} [options.path] Accept only connections matching this path\n\t   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n\t   *     permessage-deflate\n\t   * @param {Number} [options.port] The port where to bind the server\n\t   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n\t   *     server to use\n\t   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n\t   *     not to skip UTF-8 validation for text and close messages\n\t   * @param {Function} [options.verifyClient] A hook to reject connections\n\t   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n\t   *     class to use. It must be the `WebSocket` class or class that extends it\n\t   * @param {Function} [callback] A listener for the `listening` event\n\t   */ constructor(options, callback){\n            super();\n            options = {\n                allowSynchronousEvents: true,\n                autoPong: true,\n                maxPayload: 100 * 1024 * 1024,\n                skipUTF8Validation: false,\n                perMessageDeflate: false,\n                handleProtocols: null,\n                clientTracking: true,\n                verifyClient: null,\n                noServer: false,\n                backlog: null,\n                server: null,\n                host: null,\n                path: null,\n                port: null,\n                WebSocket,\n                ...options\n            };\n            if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n                throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + 'must be specified');\n            }\n            if (options.port != null) {\n                this._server = http.createServer((req, res)=>{\n                    const body = http.STATUS_CODES[426];\n                    res.writeHead(426, {\n                        'Content-Length': body.length,\n                        'Content-Type': 'text/plain'\n                    });\n                    res.end(body);\n                });\n                this._server.listen(options.port, options.host, options.backlog, callback);\n            } else if (options.server) {\n                this._server = options.server;\n            }\n            if (this._server) {\n                const emitConnection = this.emit.bind(this, 'connection');\n                this._removeListeners = addListeners(this._server, {\n                    listening: this.emit.bind(this, 'listening'),\n                    error: this.emit.bind(this, 'error'),\n                    upgrade: (req, socket, head)=>{\n                        this.handleUpgrade(req, socket, head, emitConnection);\n                    }\n                });\n            }\n            if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n            if (options.clientTracking) {\n                this.clients = new Set();\n                this._shouldEmitClose = false;\n            }\n            this.options = options;\n            this._state = RUNNING;\n        }\n        /**\n\t   * Returns the bound address, the address family name, and port of the server\n\t   * as reported by the operating system if listening on an IP socket.\n\t   * If the server is listening on a pipe or UNIX domain socket, the name is\n\t   * returned as a string.\n\t   *\n\t   * @return {(Object|String|null)} The address of the server\n\t   * @public\n\t   */ address() {\n            if (this.options.noServer) {\n                throw new Error('The server is operating in \"noServer\" mode');\n            }\n            if (!this._server) return null;\n            return this._server.address();\n        }\n        /**\n\t   * Stop the server from accepting new connections and emit the `'close'` event\n\t   * when all existing connections are closed.\n\t   *\n\t   * @param {Function} [cb] A one-time listener for the `'close'` event\n\t   * @public\n\t   */ close(cb) {\n            if (this._state === CLOSED) {\n                if (cb) {\n                    this.once('close', ()=>{\n                        cb(new Error('The server is not running'));\n                    });\n                }\n                process.nextTick(emitClose, this);\n                return;\n            }\n            if (cb) this.once('close', cb);\n            if (this._state === CLOSING) return;\n            this._state = CLOSING;\n            if (this.options.noServer || this.options.server) {\n                if (this._server) {\n                    this._removeListeners();\n                    this._removeListeners = this._server = null;\n                }\n                if (this.clients) {\n                    if (!this.clients.size) {\n                        process.nextTick(emitClose, this);\n                    } else {\n                        this._shouldEmitClose = true;\n                    }\n                } else {\n                    process.nextTick(emitClose, this);\n                }\n            } else {\n                const server = this._server;\n                this._removeListeners();\n                this._removeListeners = this._server = null;\n                //\n                // The HTTP/S server was created internally. Close it, and rely on its\n                // `'close'` event.\n                //\n                server.close(()=>{\n                    emitClose(this);\n                });\n            }\n        }\n        /**\n\t   * See if a given request should be handled by this server instance.\n\t   *\n\t   * @param {http.IncomingMessage} req Request object to inspect\n\t   * @return {Boolean} `true` if the request is valid, else `false`\n\t   * @public\n\t   */ shouldHandle(req) {\n            if (this.options.path) {\n                const index = req.url.indexOf('?');\n                const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n                if (pathname !== this.options.path) return false;\n            }\n            return true;\n        }\n        /**\n\t   * Handle a HTTP Upgrade request.\n\t   *\n\t   * @param {http.IncomingMessage} req The request object\n\t   * @param {Duplex} socket The network socket between the server and client\n\t   * @param {Buffer} head The first packet of the upgraded stream\n\t   * @param {Function} cb Callback\n\t   * @public\n\t   */ handleUpgrade(req, socket, head, cb) {\n            socket.on('error', socketOnError);\n            const key = req.headers['sec-websocket-key'];\n            const upgrade = req.headers.upgrade;\n            const version = +req.headers['sec-websocket-version'];\n            if (req.method !== 'GET') {\n                const message = 'Invalid HTTP method';\n                abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n                return;\n            }\n            if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n                const message = 'Invalid Upgrade header';\n                abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n                return;\n            }\n            if (key === undefined || !keyRegex.test(key)) {\n                const message = 'Missing or invalid Sec-WebSocket-Key header';\n                abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n                return;\n            }\n            if (version !== 8 && version !== 13) {\n                const message = 'Missing or invalid Sec-WebSocket-Version header';\n                abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n                return;\n            }\n            if (!this.shouldHandle(req)) {\n                abortHandshake(socket, 400);\n                return;\n            }\n            const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n            let protocols = new Set();\n            if (secWebSocketProtocol !== undefined) {\n                try {\n                    protocols = subprotocol.parse(secWebSocketProtocol);\n                } catch (err) {\n                    const message = 'Invalid Sec-WebSocket-Protocol header';\n                    abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n                    return;\n                }\n            }\n            const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n            const extensions = {};\n            if (this.options.perMessageDeflate && secWebSocketExtensions !== undefined) {\n                const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n                try {\n                    const offers = extension.parse(secWebSocketExtensions);\n                    if (offers[PerMessageDeflate.extensionName]) {\n                        perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n                        extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                    }\n                } catch (err) {\n                    const message = 'Invalid or unacceptable Sec-WebSocket-Extensions header';\n                    abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n                    return;\n                }\n            }\n            //\n            // Optionally call external client verification handler.\n            //\n            if (this.options.verifyClient) {\n                const info = {\n                    origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n                    secure: !!(req.socket.authorized || req.socket.encrypted),\n                    req\n                };\n                if (this.options.verifyClient.length === 2) {\n                    this.options.verifyClient(info, (verified, code, message, headers)=>{\n                        if (!verified) {\n                            return abortHandshake(socket, code || 401, message, headers);\n                        }\n                        this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n                    });\n                    return;\n                }\n                if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n            }\n            this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n        }\n        /**\n\t   * Upgrade the connection to WebSocket.\n\t   *\n\t   * @param {Object} extensions The accepted extensions\n\t   * @param {String} key The value of the `Sec-WebSocket-Key` header\n\t   * @param {Set} protocols The subprotocols\n\t   * @param {http.IncomingMessage} req The request object\n\t   * @param {Duplex} socket The network socket between the server and client\n\t   * @param {Buffer} head The first packet of the upgraded stream\n\t   * @param {Function} cb Callback\n\t   * @throws {Error} If called more than once with the same socket\n\t   * @private\n\t   */ completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n            //\n            // Destroy the socket if the client has already sent a FIN packet.\n            //\n            if (!socket.readable || !socket.writable) return socket.destroy();\n            if (socket[kWebSocket]) {\n                throw new Error('server.handleUpgrade() was called more than once with the same ' + 'socket, possibly due to a misconfiguration');\n            }\n            if (this._state > RUNNING) return abortHandshake(socket, 503);\n            const digest = createHash('sha1').update(key + GUID).digest('base64');\n            const headers = [\n                'HTTP/1.1 101 Switching Protocols',\n                'Upgrade: websocket',\n                'Connection: Upgrade',\n                `Sec-WebSocket-Accept: ${digest}`\n            ];\n            const ws = new this.options.WebSocket(null, undefined, this.options);\n            if (protocols.size) {\n                //\n                // Optionally call external protocol selection handler.\n                //\n                const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;\n                if (protocol) {\n                    headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n                    ws._protocol = protocol;\n                }\n            }\n            if (extensions[PerMessageDeflate.extensionName]) {\n                const params = extensions[PerMessageDeflate.extensionName].params;\n                const value = extension.format({\n                    [PerMessageDeflate.extensionName]: [\n                        params\n                    ]\n                });\n                headers.push(`Sec-WebSocket-Extensions: ${value}`);\n                ws._extensions = extensions;\n            }\n            //\n            // Allow external modification/inspection of handshake headers.\n            //\n            this.emit('headers', headers, req);\n            socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n            socket.removeListener('error', socketOnError);\n            ws.setSocket(socket, head, {\n                allowSynchronousEvents: this.options.allowSynchronousEvents,\n                maxPayload: this.options.maxPayload,\n                skipUTF8Validation: this.options.skipUTF8Validation\n            });\n            if (this.clients) {\n                this.clients.add(ws);\n                ws.on('close', ()=>{\n                    this.clients.delete(ws);\n                    if (this._shouldEmitClose && !this.clients.size) {\n                        process.nextTick(emitClose, this);\n                    }\n                });\n            }\n            cb(ws, req);\n        }\n    }\n    websocketServer = WebSocketServer;\n    /**\n\t * Add event listeners on an `EventEmitter` using a map of <event, listener>\n\t * pairs.\n\t *\n\t * @param {EventEmitter} server The event emitter\n\t * @param {Object.<String, Function>} map The listeners to add\n\t * @return {Function} A function that will remove the added listeners when\n\t *     called\n\t * @private\n\t */ function addListeners(server, map) {\n        for (const event of Object.keys(map))server.on(event, map[event]);\n        return function removeListeners() {\n            for (const event of Object.keys(map)){\n                server.removeListener(event, map[event]);\n            }\n        };\n    }\n    /**\n\t * Emit a `'close'` event on an `EventEmitter`.\n\t *\n\t * @param {EventEmitter} server The event emitter\n\t * @private\n\t */ function emitClose(server) {\n        server._state = CLOSED;\n        server.emit('close');\n    }\n    /**\n\t * Handle socket errors.\n\t *\n\t * @private\n\t */ function socketOnError() {\n        this.destroy();\n    }\n    /**\n\t * Close the connection when preconditions are not fulfilled.\n\t *\n\t * @param {Duplex} socket The socket of the upgrade request\n\t * @param {Number} code The HTTP response status code\n\t * @param {String} [message] The HTTP response body\n\t * @param {Object} [headers] Additional HTTP response headers\n\t * @private\n\t */ function abortHandshake(socket, code, message, headers) {\n        //\n        // The socket is writable unless the user destroyed or ended it before calling\n        // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n        // error. Handling this does not make much sense as the worst that can happen\n        // is that some of the data written by the user might be discarded due to the\n        // call to `socket.end()` below, which triggers an `'error'` event that in\n        // turn causes the socket to be destroyed.\n        //\n        message = message || http.STATUS_CODES[code];\n        headers = {\n            Connection: 'close',\n            'Content-Type': 'text/html',\n            'Content-Length': Buffer.byteLength(message),\n            ...headers\n        };\n        socket.once('finish', socket.destroy);\n        socket.end(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map((h)=>`${h}: ${headers[h]}`).join('\\r\\n') + '\\r\\n\\r\\n' + message);\n    }\n    /**\n\t * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n\t * one listener for it, otherwise call `abortHandshake()`.\n\t *\n\t * @param {WebSocketServer} server The WebSocket server\n\t * @param {http.IncomingMessage} req The request object\n\t * @param {Duplex} socket The socket of the upgrade request\n\t * @param {Number} code The HTTP response status code\n\t * @param {String} message The HTTP response body\n\t * @private\n\t */ function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n        if (server.listenerCount('wsClientError')) {\n            const err = new Error(message);\n            Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n            server.emit('wsClientError', err, socket, req);\n        } else {\n            abortHandshake(socket, code, message);\n        }\n    }\n    return websocketServer;\n}\nrequireWebsocketServer();\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar WebSocket = WS;\nvar sendMessage = function(socket, message) {\n    return new Promise(function(resolve, reject) {\n        socket.send(message, function(error) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve();\n            }\n        });\n    });\n};\nfunction getWebsocket(settings) {\n    return __awaiter(this, void 0, void 0, function() {\n        return __generator(this, function(_a) {\n            switch(_a.label){\n                case 0:\n                    if (!(settings.policy != undefined)) return [\n                        3 /*break*/ ,\n                        2\n                    ];\n                    return [\n                        4 /*yield*/ ,\n                        settings.policy(settings)\n                    ];\n                case 1:\n                    settings = _a.sent();\n                    _a.label = 2;\n                case 2:\n                    return [\n                        2 /*return*/ ,\n                        new WebSocket(settings.uri, settings.protocols, {\n                            headers: settings.headers\n                        })\n                    ];\n            }\n        });\n    });\n}\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar validationSuccess = function(message) {\n    return {\n        success: true,\n        message: message\n    };\n};\nvar validationError = function(error) {\n    return {\n        success: false,\n        error: error\n    };\n};\nvar isValidatorSuccess = function(result) {\n    return result.success;\n};\nvar WebSocketClient = /** @class */ function() {\n    function WebSocketClient(settings, handler) {\n        var _this = this;\n        this.closedPromise = undefined;\n        this.messageQueue = [];\n        this.receiverQueue = [];\n        this.done = false;\n        this.validate = handler.validate;\n        this.serialize = handler.serialize;\n        this.connectedPromise = new Promise(function(resolve, reject) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var _a;\n                var _this = this;\n                return __generator(this, function(_b) {\n                    switch(_b.label){\n                        case 0:\n                            _a = this;\n                            return [\n                                4 /*yield*/ ,\n                                getWebsocket(settings)\n                            ];\n                        case 1:\n                            _a.socket = _b.sent();\n                            this.socket.onopen = function() {\n                                _this.socket.onmessage = _this.getMessageHandler();\n                                _this.closedPromise = new Promise(function(resolve) {\n                                    _this.socket.onclose = _this.getClosedHandler(resolve);\n                                });\n                                _this.socket.onerror = _this.handleError;\n                                resolve();\n                            };\n                            this.socket.onerror = function(event) {\n                                _this.handleError(event);\n                                reject(_this.error);\n                            };\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        });\n    }\n    WebSocketClient.prototype.handleError = function(event) {\n        this.error = event.error || new Error('unknown error');\n        while(this.receiverQueue.length > 0){\n            var _a = __read(this.receiverQueue.shift(), 2);\n            _a[0];\n            var reject = _a[1];\n            reject(this.error);\n        }\n    };\n    WebSocketClient.prototype.getClosedHandler = function(closeResolve) {\n        var _this = this;\n        return function(event) {\n            if (event.code !== 1000 && _this.error === undefined) {\n                _this.error = new Error(\"WebSocket connection closed with error: \".concat(event.reason, \", code: \").concat(event.code));\n            }\n            _this.done = true;\n            while(_this.receiverQueue.length > 0){\n                var _a = __read(_this.receiverQueue.shift(), 2), resolve = _a[0], reject = _a[1];\n                if (_this.error) {\n                    reject(_this.error);\n                } else {\n                    resolve({\n                        value: undefined,\n                        done: true\n                    });\n                }\n            }\n            closeResolve();\n        };\n    };\n    WebSocketClient.prototype.getMessageHandler = function() {\n        var self = this;\n        return function(event) {\n            var result = self.validate(event);\n            if (isValidatorSuccess(result)) {\n                var message = result.message;\n                if (self.receiverQueue.length > 0) {\n                    var _a = __read(self.receiverQueue.shift(), 2), resolve = _a[0];\n                    _a[1];\n                    resolve({\n                        value: message,\n                        done: false\n                    });\n                } else {\n                    self.messageQueue.push(message);\n                }\n            } else {\n                self.error = result.error;\n                self.socket.close(1000, \"Unexpected message received\");\n            }\n        };\n    };\n    WebSocketClient.prototype[Symbol.asyncIterator] = function() {\n        var _this = this;\n        return {\n            next: function() {\n                if (_this.error) {\n                    return Promise.reject(_this.error);\n                } else if (_this.done) {\n                    return Promise.resolve({\n                        value: undefined,\n                        done: true\n                    });\n                } else if (_this.messageQueue.length > 0) {\n                    var message = _this.messageQueue.shift();\n                    return Promise.resolve({\n                        value: message,\n                        done: false\n                    });\n                } else {\n                    return new Promise(function(resolve, reject) {\n                        _this.receiverQueue.push([\n                            resolve,\n                            reject\n                        ]);\n                    });\n                }\n            }\n        };\n    };\n    WebSocketClient.prototype.send = function(message) {\n        return __awaiter(this, void 0, void 0, function() {\n            var serialized;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.connectedPromise\n                        ];\n                    case 1:\n                        _a.sent();\n                        if (this.error) {\n                            throw this.error;\n                        }\n                        serialized = this.serialize(message);\n                        return [\n                            2 /*return*/ ,\n                            sendMessage(this.socket, serialized)\n                        ];\n                }\n            });\n        });\n    };\n    WebSocketClient.prototype.close = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.connectedPromise\n                        ];\n                    case 1:\n                        _a.sent();\n                        if (this.done) {\n                            return [\n                                2 /*return*/ \n                            ];\n                        }\n                        this.socket.close();\n                        return [\n                            4 /*yield*/ ,\n                            this.closedPromise\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return WebSocketClient;\n}();\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction isKeyCredential(credential) {\n    return typeof credential === \"object\" && credential !== null && \"key\" in credential && typeof credential.key === \"string\";\n}\nfunction isTokenCredential(credential) {\n    return typeof credential === \"object\" && credential !== null && \"getToken\" in credential && typeof credential.getToken === \"function\";\n}\nvar isCredential = function(credential) {\n    return isKeyCredential(credential) || isTokenCredential(credential);\n};\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar isRTOpenAIOptions = function(options) {\n    return typeof options === \"object\" && options !== null && \"model\" in options && typeof options.model === \"string\";\n};\nvar isRTAzureOpenAIOptions = function(options) {\n    return typeof options === \"object\" && options !== null && \"deployment\" in options && typeof options.deployment === \"string\";\n};\nvar isRTVoiceAgentOptions = function(options) {\n    return typeof options === \"object\" && options !== null && \"modelOrAgent\" in options && options.modelOrAgent !== undefined;\n};\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction getUserAgent() {\n    return \"ms-rtclient/0.5.2\";\n}\nfunction openAISettings(credential, options) {\n    var uri = new URL(\"wss://api.openai.com/v1/realtime\");\n    uri.searchParams.set(\"model\", options.model);\n    return {\n        uri: uri,\n        headers: {\n            Authorization: \"Bearer \".concat(credential.key),\n            \"openai-beta\": \"realtime=v1\",\n            \"User-Agent\": \"openai-node\"\n        }\n    };\n}\nfunction azureOpenAISettings(uri, credential, options) {\n    var _this = this;\n    var _a, _b, _c;\n    var requestId = (_a = options.requestId) !== null && _a !== void 0 ? _a : crypto.randomUUID();\n    var scopes = [\n        \"https://cognitiveservices.azure.com/.default\"\n    ];\n    uri.searchParams.set(\"api-version\", (_b = options.apiVersion) !== null && _b !== void 0 ? _b : \"2024-10-01-preview\");\n    uri.searchParams.set(\"deployment\", options.deployment);\n    uri.pathname = (_c = options.path) !== null && _c !== void 0 ? _c : \"openai/realtime\";\n    return {\n        uri: uri,\n        headers: {\n            \"User-Agent\": getUserAgent(),\n            \"x-ms-client-request-id\": requestId\n        },\n        policy: function(settings) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var token;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (!isKeyCredential(credential)) return [\n                                3 /*break*/ ,\n                                1\n                            ];\n                            settings.headers = __assign(__assign({}, settings.headers), {\n                                \"api-key\": credential.key\n                            });\n                            return [\n                                3 /*break*/ ,\n                                3\n                            ];\n                        case 1:\n                            return [\n                                4 /*yield*/ ,\n                                credential.getToken(scopes)\n                            ];\n                        case 2:\n                            token = _a.sent();\n                            settings.headers = __assign(__assign({}, settings.headers), {\n                                Authorization: \"Bearer \".concat(token.token),\n                                requestId: requestId\n                            });\n                            _a.label = 3;\n                        case 3:\n                            return [\n                                2 /*return*/ ,\n                                settings\n                            ];\n                    }\n                });\n            });\n        }\n    };\n}\nfunction voiceAgentSettings(uri, credential, options) {\n    var _this = this;\n    var _a, _b, _c;\n    var requestId = (_a = options.requestId) !== null && _a !== void 0 ? _a : crypto.randomUUID();\n    var scopes = [\n        \"https://cognitiveservices.azure.com/.default\"\n    ];\n    uri.searchParams.set(\"api-version\", (_b = options.apiVersion) !== null && _b !== void 0 ? _b : \"2025-05-01-preview\");\n    uri.searchParams.set(\"x-ms-client-request-id\", requestId);\n    if (typeof options.modelOrAgent === \"string\") {\n        uri.searchParams.set(\"model\", options.modelOrAgent);\n    } else {\n        uri.searchParams.set(\"agent_id\", options.modelOrAgent.agentId);\n        if (options.modelOrAgent.projectName) {\n            uri.searchParams.set(\"agent-project-name\", options.modelOrAgent.projectName);\n        }\n        if (options.modelOrAgent.agentConnectionString) {\n            uri.searchParams.set(\"agent_connection_string\", options.modelOrAgent.agentConnectionString);\n        }\n        if (options.modelOrAgent.agentAccessToken) {\n            uri.searchParams.set(\"agent_access_token\", options.modelOrAgent.agentAccessToken);\n        }\n        if (options.modelOrAgent.threadId) {\n            uri.searchParams.set(\"agent_thread_id\", options.modelOrAgent.threadId);\n        }\n    }\n    uri.pathname = (_c = options.path) !== null && _c !== void 0 ? _c : \"voice-agent/realtime\";\n    return {\n        uri: uri,\n        headers: {\n            \"User-Agent\": getUserAgent(),\n            \"x-ms-client-request-id\": requestId\n        },\n        policy: function(settings) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var token;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (!isKeyCredential(credential)) return [\n                                3 /*break*/ ,\n                                1\n                            ];\n                            settings.headers = __assign(__assign({}, settings.headers), {\n                                \"api-key\": credential.key\n                            });\n                            return [\n                                3 /*break*/ ,\n                                3\n                            ];\n                        case 1:\n                            return [\n                                4 /*yield*/ ,\n                                credential.getToken(scopes)\n                            ];\n                        case 2:\n                            token = _a.sent();\n                            settings.headers = __assign(__assign({}, settings.headers), {\n                                Authorization: \"Bearer \".concat(token.token),\n                                requestId: requestId\n                            });\n                            _a.label = 3;\n                        case 3:\n                            return [\n                                2 /*return*/ ,\n                                settings\n                            ];\n                    }\n                });\n            });\n        }\n    };\n}\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar MessageQueue = /** @class */ function() {\n    function MessageQueue(receiveDelegate) {\n        this.receiveDelegate = receiveDelegate;\n        this.messages = [];\n        this.waitingReceivers = [];\n        this.isPolling = false;\n        this.pollPromise = null;\n    }\n    MessageQueue.prototype.pushBack = function(message) {\n        this.messages.push(message);\n    };\n    MessageQueue.prototype.findAndRemove = function(predicate) {\n        var index = this.messages.findIndex(predicate);\n        if (index === -1) {\n            return null;\n        }\n        return this.messages.splice(index, 1)[0];\n    };\n    MessageQueue.prototype.pollReceive = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                if (this.isPolling) {\n                    return [\n                        2 /*return*/ \n                    ];\n                }\n                this.isPolling = true;\n                this.pollPromise = this.doPollReceive();\n                return [\n                    2 /*return*/ ,\n                    this.pollPromise\n                ];\n            });\n        });\n    };\n    MessageQueue.prototype.doPollReceive = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var message, error_1;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        _a.trys.push([\n                            0,\n                            4,\n                            5,\n                            6\n                        ]);\n                        _a.label = 1;\n                    case 1:\n                        if (!this.isPolling) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.receiveDelegate()\n                        ];\n                    case 2:\n                        message = _a.sent();\n                        if (message === null) {\n                            this.notifyEndOfStream();\n                            return [\n                                3 /*break*/ ,\n                                3\n                            ];\n                        }\n                        this.notifyReceiver(message);\n                        if (this.waitingReceivers.length === 0) {\n                            return [\n                                3 /*break*/ ,\n                                3\n                            ];\n                        }\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 3:\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 4:\n                        error_1 = _a.sent();\n                        this.notifyError(error_1);\n                        return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                    case 5:\n                        this.isPolling = false;\n                        this.pollPromise = null;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 6:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    MessageQueue.prototype.notifyError = function(error) {\n        while(this.waitingReceivers.length > 0){\n            var _a = __read(this.waitingReceivers.shift(), 3);\n            _a[0];\n            var _b = __read(_a[1], 2);\n            _b[0];\n            var reject = _b[1];\n            _a[2];\n            reject(error);\n        }\n    };\n    MessageQueue.prototype.notifyEndOfStream = function() {\n        while(this.waitingReceivers.length > 0){\n            var _a = __read(this.waitingReceivers.shift(), 3);\n            _a[0];\n            var _b = __read(_a[1], 2), resolve = _b[0];\n            _b[1];\n            _a[2];\n            resolve(null);\n        }\n    };\n    MessageQueue.prototype.notifyReceiver = function(message) {\n        var index = this.waitingReceivers.findIndex(function(_a) {\n            var _b = __read(_a, 3), predicate = _b[0], _c = __read(_b[1], 2);\n            _c[0];\n            _c[1];\n            _b[2];\n            return predicate(message);\n        });\n        if (index === -1) {\n            this.pushBack(message);\n            return;\n        }\n        var _a = __read(this.waitingReceivers.splice(index, 1)[0], 3);\n        _a[0];\n        var _b = __read(_a[1], 2), resolve = _b[0];\n        _b[1];\n        _a[2];\n        resolve(message);\n    };\n    MessageQueue.prototype.queuedMessageCount = function() {\n        return this.messages.length;\n    };\n    MessageQueue.prototype.receive = function(predicate, abort) {\n        var _this = this;\n        var foundMessage = this.findAndRemove(predicate);\n        if (foundMessage !== null) {\n            return Promise.resolve(foundMessage);\n        }\n        return new Promise(function(resolve, reject) {\n            return __awaiter(_this, void 0, void 0, function() {\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            this.waitingReceivers.push([\n                                predicate,\n                                [\n                                    resolve,\n                                    reject\n                                ],\n                                abort || new AbortController()\n                            ]);\n                            return [\n                                4 /*yield*/ ,\n                                this.pollReceive()\n                            ];\n                        case 1:\n                            _a.sent();\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        });\n    };\n    return MessageQueue;\n}();\nvar MessageQueueWithError = /** @class */ function(_super) {\n    __extends(MessageQueueWithError, _super);\n    function MessageQueueWithError(receiveDelegate, errorPredicate) {\n        var _this = _super.call(this, receiveDelegate) || this;\n        _this.errorPredicate = errorPredicate;\n        _this.error = undefined;\n        return _this;\n    }\n    MessageQueueWithError.prototype.notifyErrorMessage = function(message) {\n        while(this.waitingReceivers.length > 0){\n            var _a = __read(this.waitingReceivers.shift(), 2);\n            _a[0];\n            var _b = __read(_a[1], 2), resolve = _b[0];\n            _b[1];\n            resolve(message);\n        }\n    };\n    MessageQueueWithError.prototype.notifyReceiver = function(message) {\n        if (this.errorPredicate(message)) {\n            this.error = message;\n            this.notifyErrorMessage(message);\n            return;\n        }\n        var index = this.waitingReceivers.findIndex(function(_a) {\n            var _b = __read(_a, 3), predicate = _b[0], _c = __read(_b[1], 2);\n            _c[0];\n            _c[1];\n            _b[2];\n            return predicate(message);\n        });\n        if (index === -1) {\n            this.pushBack(message);\n            return;\n        }\n        var _a = __read(this.waitingReceivers.splice(index, 1)[0], 3);\n        _a[0];\n        var _b = __read(_a[1], 2), resolve = _b[0];\n        _b[1];\n        _a[2];\n        resolve(message);\n    };\n    MessageQueueWithError.prototype.receive = function(predicate) {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            var _this = this;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        if (this.error !== undefined) {\n                            return [\n                                2 /*return*/ ,\n                                this.error\n                            ];\n                        }\n                        return [\n                            4 /*yield*/ ,\n                            _super.prototype.receive.call(this, function(message) {\n                                return predicate(message) || _this.errorPredicate(message);\n                            })\n                        ];\n                    case 1:\n                        message = _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            message\n                        ];\n                }\n            });\n        });\n    };\n    return MessageQueueWithError;\n}(MessageQueue);\nvar SharedEndQueue = /** @class */ function() {\n    function SharedEndQueue(receiveDelegate, errorPredicate, endPredicate) {\n        this.receiveDelegate = receiveDelegate;\n        this.errorPredicate = errorPredicate;\n        this.endPredicate = endPredicate;\n        this.queue = [];\n        this.lock = Promise.resolve();\n    }\n    SharedEndQueue.prototype.receive = function(predicate) {\n        return __awaiter(this, void 0, void 0, function() {\n            var release, i, message, message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.acquireLock()\n                        ];\n                    case 1:\n                        release = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([\n                            2,\n                            ,\n                            6,\n                            7\n                        ]);\n                        for(i = 0; i < this.queue.length; i++){\n                            message = this.queue[i];\n                            if (predicate(message)) {\n                                this.queue.splice(i, 1);\n                                return [\n                                    2 /*return*/ ,\n                                    message\n                                ];\n                            } else if (this.endPredicate(message)) {\n                                return [\n                                    2 /*return*/ ,\n                                    message\n                                ];\n                            }\n                        }\n                        _a.label = 3;\n                    case 3:\n                        return [\n                            4 /*yield*/ ,\n                            this.receiveDelegate()\n                        ];\n                    case 4:\n                        message = _a.sent();\n                        if (message === null || this.errorPredicate(message) || predicate(message)) {\n                            return [\n                                2 /*return*/ ,\n                                message\n                            ];\n                        }\n                        if (this.endPredicate(message)) {\n                            this.queue.push(message);\n                            return [\n                                2 /*return*/ ,\n                                message\n                            ];\n                        }\n                        this.queue.push(message);\n                        return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                    case 5:\n                        return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                    case 6:\n                        release();\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 7:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    SharedEndQueue.prototype.acquireLock = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var release, newLock, oldLock;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        newLock = new Promise(function(resolve) {\n                            release = resolve;\n                        });\n                        oldLock = this.lock;\n                        this.lock = newLock;\n                        return [\n                            4 /*yield*/ ,\n                            oldLock\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            release\n                        ];\n                }\n            });\n        });\n    };\n    return SharedEndQueue;\n}();\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction getRandomValues(array) {\n    if (typeof crypto !== \"undefined\" && crypto.getRandomValues) {\n        return crypto.getRandomValues(array);\n    } else if (false) {} else {\n        throw new Error(\"No secure random number generator available.\");\n    }\n}\nfunction generateId(prefix, length) {\n    var array = new Uint8Array(length);\n    getRandomValues(array);\n    var base64 = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(array), false))).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n    return \"\".concat(prefix, \"-\").concat(base64).slice(0, length);\n}\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar LowLevelRTClient = /** @class */ function() {\n    function LowLevelRTClient(uriOrCredential, credentialOrOptions, options) {\n        var settings = function() {\n            if (isKeyCredential(uriOrCredential) && isRTOpenAIOptions(credentialOrOptions)) {\n                return openAISettings(uriOrCredential, credentialOrOptions);\n            } else if (isCredential(credentialOrOptions) && isRTAzureOpenAIOptions(options)) {\n                return azureOpenAISettings(uriOrCredential, credentialOrOptions, options);\n            } else if (isCredential(credentialOrOptions) && isRTVoiceAgentOptions(options)) {\n                return voiceAgentSettings(uriOrCredential, credentialOrOptions, options);\n            } else {\n                throw new Error(\"Invalid combination of arguments to initialize the Realtime client\");\n            }\n        }();\n        this.requestId = settings.requestId;\n        this.client = this.getWebsocket(settings);\n    }\n    LowLevelRTClient.prototype.getWebsocket = function(settings) {\n        var handler = {\n            validate: function(event) {\n                if (typeof event.data !== \"string\") {\n                    return validationError(new Error(\"Invalid message type\"));\n                }\n                try {\n                    var data = JSON.parse(event.data);\n                    if (isServerMessageType(data)) {\n                        return validationSuccess(data);\n                    }\n                    return validationError(new Error(\"Invalid message type\"));\n                } catch (error) {\n                    return validationError(new Error(\"Invalid JSON message\"));\n                }\n            },\n            serialize: function(message) {\n                return JSON.stringify(message);\n            }\n        };\n        return new WebSocketClient(settings, handler);\n    };\n    LowLevelRTClient.prototype.messages = function() {\n        return __asyncGenerator(this, arguments, function messages_1() {\n            var _a, _b, _c, message, e_1_1;\n            var _d, e_1, _e, _f;\n            return __generator(this, function(_g) {\n                switch(_g.label){\n                    case 0:\n                        _g.trys.push([\n                            0,\n                            7,\n                            8,\n                            13\n                        ]);\n                        _a = true, _b = __asyncValues(this.client);\n                        _g.label = 1;\n                    case 1:\n                        return [\n                            4 /*yield*/ ,\n                            __await(_b.next())\n                        ];\n                    case 2:\n                        if (!(_c = _g.sent(), _d = _c.done, !_d)) return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                        _f = _c.value;\n                        _a = false;\n                        message = _f;\n                        return [\n                            4 /*yield*/ ,\n                            __await(message)\n                        ];\n                    case 3:\n                        return [\n                            4 /*yield*/ ,\n                            _g.sent()\n                        ];\n                    case 4:\n                        _g.sent();\n                        _g.label = 5;\n                    case 5:\n                        _a = true;\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 6:\n                        return [\n                            3 /*break*/ ,\n                            13\n                        ];\n                    case 7:\n                        e_1_1 = _g.sent();\n                        e_1 = {\n                            error: e_1_1\n                        };\n                        return [\n                            3 /*break*/ ,\n                            13\n                        ];\n                    case 8:\n                        _g.trys.push([\n                            8,\n                            ,\n                            11,\n                            12\n                        ]);\n                        if (!(!_a && !_d && (_e = _b.return))) return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(_e.call(_b))\n                        ];\n                    case 9:\n                        _g.sent();\n                        _g.label = 10;\n                    case 10:\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 11:\n                        if (e_1) throw e_1.error;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 12:\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 13:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    LowLevelRTClient.prototype.send = function(message) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send(message)\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    LowLevelRTClient.prototype.close = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.client.close()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return LowLevelRTClient;\n}();\nvar RTError = /** @class */ function(_super) {\n    __extends(RTError, _super);\n    function RTError(errorDetails) {\n        var _this = _super.call(this, errorDetails.message) || this;\n        _this.errorDetails = errorDetails;\n        Object.setPrototypeOf(_this, RTError.prototype);\n        return _this;\n    }\n    Object.defineProperty(RTError.prototype, \"code\", {\n        get: function() {\n            return this.errorDetails.code;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTError.prototype, \"param\", {\n        get: function() {\n            return this.errorDetails.param;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTError.prototype, \"eventId\", {\n        get: function() {\n            return this.errorDetails.event_id;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return RTError;\n}(Error);\nvar RTInputAudioItem = /** @class */ function() {\n    function RTInputAudioItem(id, audioStartMillis, hasTranscription, queue) {\n        this.id = id;\n        this.audioStartMillis = audioStartMillis;\n        this.hasTranscription = hasTranscription;\n        this.queue = queue;\n        this.type = \"input_audio\";\n        this.audioEndMillis = undefined;\n        this.transcription = undefined;\n        this.waitPromise = null;\n    }\n    RTInputAudioItem.create = function(id, audioStartMillis, hasTranscription, queue) {\n        return new RTInputAudioItem(id, audioStartMillis, hasTranscription, queue);\n    };\n    RTInputAudioItem.prototype.wait = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var itemIdValidMessage, message;\n            var _this = this;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        itemIdValidMessage = function(message) {\n                            return [\n                                \"input_audio_buffer.speech_stopped\",\n                                \"conversation.item.input_audio_transcription.completed\",\n                                \"conversation.item.input_audio_transcription.failed\"\n                            ].includes(message.type);\n                        };\n                        _a.label = 1;\n                    case 1:\n                        return [\n                            4 /*yield*/ ,\n                            this.queue.receive(function(m) {\n                                return itemIdValidMessage(m) && m.item_id == _this.id || m.type === \"conversation.item.created\" && m.item.id == _this.id;\n                            })\n                        ];\n                    case 2:\n                        message = _a.sent();\n                        if (message === null) {\n                            return [\n                                2 /*return*/ \n                            ];\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type === \"input_audio_buffer.speech_stopped\") {\n                            this.audioEndMillis = message.audio_end_ms;\n                            if (!this.hasTranscription) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                        } else if (message.type === \"conversation.item.created\" && !this.hasTranscription) {\n                            return [\n                                2 /*return*/ \n                            ];\n                        } else if (message.type === \"conversation.item.input_audio_transcription.completed\") {\n                            this.transcription = message.transcript;\n                            return [\n                                2 /*return*/ \n                            ];\n                        } else if (message.type === \"conversation.item.input_audio_transcription.failed\") {\n                            throw new RTError(message.error);\n                        }\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 3:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTInputAudioItem.prototype.waitForCompletion = function() {\n        if (!this.waitPromise) {\n            this.waitPromise = this.wait();\n        }\n        return this.waitPromise;\n    };\n    return RTInputAudioItem;\n}();\n/* TODO: Move to PAL so we use Buffer.from in Node */ function decodeBase64(base64) {\n    var binaryString = atob(base64);\n    var length = binaryString.length;\n    var uint8Array = new Uint8Array(length);\n    for(var i = 0; i < length; i++){\n        uint8Array[i] = binaryString.charCodeAt(i);\n    }\n    return uint8Array;\n}\nvar RTAudioContent = /** @class */ function() {\n    function RTAudioContent(message, queue) {\n        var _this = this;\n        this.queue = queue;\n        this.type = \"audio\";\n        this.itemId = message.item_id;\n        this.contentIndex = message.content_index;\n        if (message.part.type !== \"audio\") {\n            throw new Error(\"Unexpected part type\");\n        }\n        this.part = message.part;\n        this.contentQueue = new SharedEndQueue(function() {\n            return _this.receiveContent();\n        }, function(m) {\n            return m !== null && m.type === \"error\";\n        }, function(m) {\n            return m !== null && m.type === \"response.content_part.done\";\n        });\n    }\n    RTAudioContent.create = function(message, queue) {\n        return new RTAudioContent(message, queue);\n    };\n    Object.defineProperty(RTAudioContent.prototype, \"transcript\", {\n        get: function() {\n            return this.part.transcript;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RTAudioContent.prototype.receiveContent = function() {\n        var _this = this;\n        function isValidMessage(m) {\n            return [\n                \"response.audio.delta\",\n                \"response.audio.done\",\n                \"response.audio_transcript.delta\",\n                \"response.audio_transcript.done\",\n                \"response.content_part.done\"\n            ].includes(m.type);\n        }\n        return this.queue.receive(function(m) {\n            return isValidMessage(m) && m.item_id === _this.itemId && m.content_index === _this.contentIndex;\n        });\n    };\n    RTAudioContent.prototype.audioChunks = function() {\n        return __asyncGenerator(this, arguments, function audioChunks_1() {\n            var message, buffer;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.contentQueue.receive(function(m) {\n                                return m !== null && [\n                                    \"response.audio.delta\",\n                                    \"response.audio.done\"\n                                ].includes(m.type);\n                            }))\n                        ];\n                    case 1:\n                        message = _a.sent();\n                        if (!(message === null)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 2:\n                        if (!(message.type === \"error\")) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        throw new RTError(message.error);\n                    case 3:\n                        if (!(message.type === \"response.content_part.done\")) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        if (message.part.type !== \"audio\") {\n                            throw new Error(\"Unexpected part type\");\n                        }\n                        this.part = message.part;\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 4:\n                        if (!(message.type === \"response.audio.delta\")) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        buffer = decodeBase64(message.delta);\n                        return [\n                            4 /*yield*/ ,\n                            __await(buffer)\n                        ];\n                    case 5:\n                        return [\n                            4 /*yield*/ ,\n                            _a.sent()\n                        ];\n                    case 6:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        if (message.type === \"response.audio.done\") {\n                            // We are skipping this as it's information is already provided by 'response.content_part.done'\n                            // and that is a better signal to end the iteration\n                            return [\n                                3 /*break*/ ,\n                                0\n                            ];\n                        }\n                        _a.label = 8;\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            0\n                        ];\n                    case 9:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTAudioContent.prototype.transcriptChunks = function() {\n        return __asyncGenerator(this, arguments, function transcriptChunks_1() {\n            var message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.contentQueue.receive(function(m) {\n                                return m !== null && [\n                                    \"response.audio_transcript.delta\",\n                                    \"response.audio_transcript.done\"\n                                ].includes(m.type);\n                            }))\n                        ];\n                    case 1:\n                        message = _a.sent();\n                        if (!(message === null)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 2:\n                        if (!(message.type === \"error\")) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        throw new RTError(message.error);\n                    case 3:\n                        if (!(message.type === \"response.content_part.done\")) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        if (message.part.type !== \"audio\") {\n                            throw new Error(\"Unexpected part type\");\n                        }\n                        this.part = message.part;\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 4:\n                        if (!(message.type === \"response.audio_transcript.delta\")) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(message.delta)\n                        ];\n                    case 5:\n                        return [\n                            4 /*yield*/ ,\n                            _a.sent()\n                        ];\n                    case 6:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        if (message.type === \"response.audio_transcript.done\") {\n                            // We are skipping this as it's information is already provided by 'response.content_part.done'\n                            // and that is a better signal to end the iteration\n                            return [\n                                3 /*break*/ ,\n                                0\n                            ];\n                        }\n                        _a.label = 8;\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            0\n                        ];\n                    case 9:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return RTAudioContent;\n}();\nvar RTTextContent = /** @class */ function() {\n    function RTTextContent(message, queue) {\n        this.queue = queue;\n        this.type = \"text\";\n        this.itemId = message.item_id;\n        this.contentIndex = message.content_index;\n        if (message.part.type !== \"text\") {\n            throw new Error(\"Unexpected part type\");\n        }\n        this.part = message.part;\n    }\n    RTTextContent.create = function(message, queue) {\n        return new RTTextContent(message, queue);\n    };\n    Object.defineProperty(RTTextContent.prototype, \"text\", {\n        get: function() {\n            return this.part.text;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RTTextContent.prototype.textChunks = function() {\n        return __asyncGenerator(this, arguments, function textChunks_1() {\n            var message;\n            var _this = this;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.queue.receive(function(m) {\n                                return (m.type === \"response.content_part.done\" || m.type === \"response.text.delta\" || m.type === \"response.text.done\") && m.item_id === _this.itemId && m.content_index === _this.contentIndex;\n                            }))\n                        ];\n                    case 1:\n                        message = _a.sent();\n                        if (!(message === null)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 2:\n                        if (!(message.type === \"error\")) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        throw new RTError(message.error);\n                    case 3:\n                        if (!(message.type === \"response.content_part.done\")) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        if (message.part.type !== \"text\") {\n                            throw new Error(\"Unexpected part type\");\n                        }\n                        this.part = message.part;\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 4:\n                        if (!(message.type === \"response.text.delta\")) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(message.delta)\n                        ];\n                    case 5:\n                        return [\n                            4 /*yield*/ ,\n                            _a.sent()\n                        ];\n                    case 6:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        if (message.type === \"response.text.done\") {\n                            // We are skipping this as it's information is already provided by 'response.content_part.done'\n                            // and that is a better signal to end the iteration\n                            return [\n                                3 /*break*/ ,\n                                0\n                            ];\n                        }\n                        _a.label = 8;\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            0\n                        ];\n                    case 9:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return RTTextContent;\n}();\nvar RTMessageItem = /** @class */ function() {\n    function RTMessageItem(responseId, item, previousItemId, queue) {\n        this.responseId = responseId;\n        this.item = item;\n        this.previousItemId = previousItemId;\n        this.queue = queue;\n        this.type = \"message\";\n    }\n    RTMessageItem.create = function(responseId, item, previousItemId, queue) {\n        return new RTMessageItem(responseId, item, previousItemId, queue);\n    };\n    Object.defineProperty(RTMessageItem.prototype, \"id\", {\n        get: function() {\n            return this.item.id;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTMessageItem.prototype, \"role\", {\n        get: function() {\n            return this.item.role;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTMessageItem.prototype, \"status\", {\n        get: function() {\n            return this.item.status;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RTMessageItem.prototype[Symbol.asyncIterator] = function() {\n        return __asyncGenerator(this, arguments, function _a() {\n            var message;\n            var _this = this;\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.queue.receive(function(m) {\n                                return m.type === \"response.content_part.added\" && m.item_id === _this.id || m.type === \"response.output_item.done\" && m.item.id === _this.id;\n                            }))\n                        ];\n                    case 1:\n                        message = _b.sent();\n                        if (!(message === null)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            3 /*break*/ ,\n                            14\n                        ];\n                    case 2:\n                        if (!(message.type === \"error\")) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        throw new RTError(message.error);\n                    case 3:\n                        if (!(message.type === \"response.output_item.done\")) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        if (message.item.type === \"message\") {\n                            this.item = message.item;\n                        } else {\n                            throw new Error(\"Unexpected item type\");\n                        }\n                        return [\n                            3 /*break*/ ,\n                            14\n                        ];\n                    case 4:\n                        if (!(message.type === \"response.content_part.added\")) return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                        if (!(message.part.type === \"audio\")) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(RTAudioContent.create(message, this.queue))\n                        ];\n                    case 5:\n                        return [\n                            4 /*yield*/ ,\n                            _b.sent()\n                        ];\n                    case 6:\n                        _b.sent();\n                        return [\n                            3 /*break*/ ,\n                            11\n                        ];\n                    case 7:\n                        if (!(message.part.type === \"text\")) return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(RTTextContent.create(message, this.queue))\n                        ];\n                    case 8:\n                        return [\n                            4 /*yield*/ ,\n                            _b.sent()\n                        ];\n                    case 9:\n                        _b.sent();\n                        return [\n                            3 /*break*/ ,\n                            11\n                        ];\n                    case 10:\n                        throw new Error(\"Unexpected part type: \".concat(message.part.type));\n                    case 11:\n                        return [\n                            3 /*break*/ ,\n                            13\n                        ];\n                    case 12:\n                        throw new Error(\"Unexpected message type: \".concat(message.type));\n                    case 13:\n                        return [\n                            3 /*break*/ ,\n                            0\n                        ];\n                    case 14:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return RTMessageItem;\n}();\nvar RTFunctionCallItem = /** @class */ function() {\n    function RTFunctionCallItem(responseId, item, previousItemId, queue) {\n        this.responseId = responseId;\n        this.item = item;\n        this.previousItemId = previousItemId;\n        this.queue = queue;\n        this.type = \"function_call\";\n        this.awaited = false;\n        this.iterated = false;\n    }\n    RTFunctionCallItem.create = function(responseId, item, previousItemId, queue) {\n        return new RTFunctionCallItem(responseId, item, previousItemId, queue);\n    };\n    Object.defineProperty(RTFunctionCallItem.prototype, \"id\", {\n        get: function() {\n            return this.item.id;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTFunctionCallItem.prototype, \"functionName\", {\n        get: function() {\n            return this.item.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTFunctionCallItem.prototype, \"callId\", {\n        get: function() {\n            return this.item.call_id;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTFunctionCallItem.prototype, \"arguments\", {\n        get: function() {\n            return this.item.arguments;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RTFunctionCallItem.prototype.inner = function() {\n        return __asyncGenerator(this, arguments, function inner_1() {\n            var message;\n            var _this = this;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.queue.receive(function(m) {\n                                return (m.type == \"response.function_call_arguments.delta\" || m.type == \"response.function_call_arguments.done\") && m.item_id === _this.id || m.type === \"response.output_item.done\" && m.item.id === _this.id;\n                            }))\n                        ];\n                    case 1:\n                        message = _a.sent();\n                        if (!(message === null)) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                    case 2:\n                        if (!(message.type === \"error\")) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        throw new RTError(message.error);\n                    case 3:\n                        if (!(message.type === \"response.output_item.done\")) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        if (message.item.type === \"function_call\") {\n                            this.item = message.item;\n                            return [\n                                3 /*break*/ ,\n                                9\n                            ];\n                        } else {\n                            throw new Error(\"Unexpected item type\");\n                        }\n                    case 4:\n                        if (!(message.type === \"response.function_call_arguments.delta\")) return [\n                            3 /*break*/ ,\n                            7\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(message.delta)\n                        ];\n                    case 5:\n                        return [\n                            4 /*yield*/ ,\n                            _a.sent()\n                        ];\n                    case 6:\n                        _a.sent();\n                        return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                    case 7:\n                        if (message.type === \"response.function_call_arguments.done\") {\n                            return [\n                                3 /*break*/ ,\n                                0\n                            ];\n                        } else {\n                            throw new Error(\"Unexpected message type: \".concat(message.type));\n                        }\n                    case 8:\n                        return [\n                            3 /*break*/ ,\n                            0\n                        ];\n                    case 9:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTFunctionCallItem.prototype[Symbol.asyncIterator] = function() {\n        return __asyncGenerator(this, arguments, function _a() {\n            return __generator(this, function(_b) {\n                switch(_b.label){\n                    case 0:\n                        if (this.awaited) {\n                            throw new Error(\"Cannot iterate after awaiting.\");\n                        }\n                        this.iterated = true;\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.inner())\n                        ];\n                    case 1:\n                        return [\n                            2 /*return*/ ,\n                            _b.sent()\n                        ];\n                }\n            });\n        });\n    };\n    RTFunctionCallItem.prototype.waitForCompletion = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var _a, _b, _c, e_2_1;\n            var _d, e_2, _e;\n            return __generator(this, function(_g) {\n                switch(_g.label){\n                    case 0:\n                        if (this.iterated) {\n                            throw new Error(\"Cannot await after iterating.\");\n                        }\n                        this.awaited = true;\n                        _g.label = 1;\n                    case 1:\n                        _g.trys.push([\n                            1,\n                            6,\n                            7,\n                            12\n                        ]);\n                        _a = true, _b = __asyncValues(this.inner());\n                        _g.label = 2;\n                    case 2:\n                        return [\n                            4 /*yield*/ ,\n                            _b.next()\n                        ];\n                    case 3:\n                        if (!(_c = _g.sent(), _d = _c.done, !_d)) return [\n                            3 /*break*/ ,\n                            5\n                        ];\n                        _c.value;\n                        _a = false;\n                        _g.label = 4;\n                    case 4:\n                        _a = true;\n                        return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                    case 5:\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 6:\n                        e_2_1 = _g.sent();\n                        e_2 = {\n                            error: e_2_1\n                        };\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 7:\n                        _g.trys.push([\n                            7,\n                            ,\n                            10,\n                            11\n                        ]);\n                        if (!(!_a && !_d && (_e = _b.return))) return [\n                            3 /*break*/ ,\n                            9\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            _e.call(_b)\n                        ];\n                    case 8:\n                        _g.sent();\n                        _g.label = 9;\n                    case 9:\n                        return [\n                            3 /*break*/ ,\n                            11\n                        ];\n                    case 10:\n                        if (e_2) throw e_2.error;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 11:\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 12:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return RTFunctionCallItem;\n}();\nfunction isMessageItem(item) {\n    return item.type === \"message\";\n}\nfunction isFunctionCallItem(item) {\n    return item.type === \"function_call\";\n}\nvar RTResponse = /** @class */ function() {\n    function RTResponse(response, queue, client) {\n        this.response = response;\n        this.queue = queue;\n        this.client = client;\n        this.type = \"response\";\n        this.done = false;\n    }\n    RTResponse.create = function(response, queue, client) {\n        return new RTResponse(response, queue, client);\n    };\n    Object.defineProperty(RTResponse.prototype, \"id\", {\n        get: function() {\n            return this.response.id;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTResponse.prototype, \"status\", {\n        get: function() {\n            return this.response.status;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTResponse.prototype, \"statusDetails\", {\n        get: function() {\n            return this.response.status_details;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTResponse.prototype, \"output\", {\n        get: function() {\n            return this.response.output;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(RTResponse.prototype, \"usage\", {\n        get: function() {\n            return this.response.usage;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RTResponse.prototype.cancel = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var _a, _b, _c, e_3_1;\n            var _d, e_3, _e;\n            return __generator(this, function(_g) {\n                switch(_g.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"response.cancel\"\n                            })\n                        ];\n                    case 1:\n                        _g.sent();\n                        _g.label = 2;\n                    case 2:\n                        _g.trys.push([\n                            2,\n                            7,\n                            8,\n                            13\n                        ]);\n                        _a = true, _b = __asyncValues(this);\n                        _g.label = 3;\n                    case 3:\n                        return [\n                            4 /*yield*/ ,\n                            _b.next()\n                        ];\n                    case 4:\n                        if (!(_c = _g.sent(), _d = _c.done, !_d)) return [\n                            3 /*break*/ ,\n                            6\n                        ];\n                        _c.value;\n                        _a = false;\n                        _g.label = 5;\n                    case 5:\n                        _a = true;\n                        return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                    case 6:\n                        return [\n                            3 /*break*/ ,\n                            13\n                        ];\n                    case 7:\n                        e_3_1 = _g.sent();\n                        e_3 = {\n                            error: e_3_1\n                        };\n                        return [\n                            3 /*break*/ ,\n                            13\n                        ];\n                    case 8:\n                        _g.trys.push([\n                            8,\n                            ,\n                            11,\n                            12\n                        ]);\n                        if (!(!_a && !_d && (_e = _b.return))) return [\n                            3 /*break*/ ,\n                            10\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            _e.call(_b)\n                        ];\n                    case 9:\n                        _g.sent();\n                        _g.label = 10;\n                    case 10:\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 11:\n                        if (e_3) throw e_3.error;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 12:\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 13:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTResponse.prototype[Symbol.asyncIterator] = function() {\n        var _this = this;\n        return {\n            next: function() {\n                return __awaiter(_this, void 0, void 0, function() {\n                    var message, created_message, messageItem, functionCallItem;\n                    var _this = this;\n                    return __generator(this, function(_a) {\n                        switch(_a.label){\n                            case 0:\n                                if (this.done) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            value: undefined,\n                                            done: true\n                                        }\n                                    ];\n                                }\n                                return [\n                                    4 /*yield*/ ,\n                                    this.queue.receive(function(m) {\n                                        return m.type === \"response.done\" && m.response.id === _this.id || m.type === \"response.output_item.added\" && m.response_id === _this.id;\n                                    })\n                                ];\n                            case 1:\n                                message = _a.sent();\n                                if (!(message === null)) return [\n                                    3 /*break*/ ,\n                                    2\n                                ];\n                                return [\n                                    2 /*return*/ ,\n                                    {\n                                        value: undefined,\n                                        done: true\n                                    }\n                                ];\n                            case 2:\n                                if (!(message.type === \"error\")) return [\n                                    3 /*break*/ ,\n                                    3\n                                ];\n                                throw new RTError(message.error);\n                            case 3:\n                                if (!(message.type === \"response.done\")) return [\n                                    3 /*break*/ ,\n                                    4\n                                ];\n                                this.done = true;\n                                this.response = message.response;\n                                return [\n                                    2 /*return*/ ,\n                                    {\n                                        value: undefined,\n                                        done: true\n                                    }\n                                ];\n                            case 4:\n                                if (!(message.type === \"response.output_item.added\")) return [\n                                    3 /*break*/ ,\n                                    6\n                                ];\n                                return [\n                                    4 /*yield*/ ,\n                                    this.queue.receive(function(m) {\n                                        return m.type === \"conversation.item.created\" && m.item.id === message.item.id;\n                                    })\n                                ];\n                            case 5:\n                                created_message = _a.sent();\n                                if (created_message === null) {\n                                    return [\n                                        2 /*return*/ ,\n                                        {\n                                            value: undefined,\n                                            done: true\n                                        }\n                                    ];\n                                } else if (created_message.type === \"error\") {\n                                    throw new RTError(created_message.error);\n                                } else if (created_message.type === \"conversation.item.created\") {\n                                    if (created_message.item.type === \"message\") {\n                                        messageItem = RTMessageItem.create(this.id, created_message.item, created_message.previous_item_id, this.queue);\n                                        return [\n                                            2 /*return*/ ,\n                                            {\n                                                value: messageItem,\n                                                done: false\n                                            }\n                                        ];\n                                    } else if (created_message.item.type === \"function_call\") {\n                                        functionCallItem = RTFunctionCallItem.create(this.id, created_message.item, created_message.previous_item_id, this.queue);\n                                        return [\n                                            2 /*return*/ ,\n                                            {\n                                                value: functionCallItem,\n                                                done: false\n                                            }\n                                        ];\n                                    } else {\n                                        throw new Error(\"Unexpected item type (\".concat(created_message.item.type, \".\"));\n                                    }\n                                } else {\n                                    throw new Error(\"Unexpected message type: \".concat(created_message.type));\n                                }\n                            case 6:\n                                throw new Error(\"Unexpected message type: \".concat(message.type));\n                            case 7:\n                                return [\n                                    2 /*return*/ \n                                ];\n                        }\n                    });\n                });\n            }\n        };\n    };\n    return RTResponse;\n}();\nvar RTClient = /** @class */ function() {\n    function RTClient(uriOrCredential, credentialOrOptions, options) {\n        var _this = this;\n        this.iterating = false;\n        this.client = function() {\n            if (isKeyCredential(uriOrCredential)) {\n                return new LowLevelRTClient(uriOrCredential, credentialOrOptions);\n            } else {\n                return new LowLevelRTClient(uriOrCredential, credentialOrOptions, options);\n            }\n        }();\n        this.messagesIterable = this.client.messages()[Symbol.asyncIterator]();\n        this.messageQueue = new MessageQueueWithError(function() {\n            return _this.receiveMessages();\n        }, function(m) {\n            return m.type === \"error\";\n        });\n    }\n    RTClient.prototype.receiveMessages = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var result;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.messagesIterable.next()\n                        ];\n                    case 1:\n                        result = _a.sent();\n                        return [\n                            2 /*return*/ ,\n                            result.done ? null : result.value\n                        ];\n                }\n            });\n        });\n    };\n    Object.defineProperty(RTClient.prototype, \"requestId\", {\n        get: function() {\n            return this.client.requestId;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RTClient.prototype.init = function() {\n        var _this = this;\n        if (this.initPromise !== undefined) {\n            return this.initPromise;\n        }\n        this.initPromise = function() {\n            return __awaiter(_this, void 0, void 0, function() {\n                var message;\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            if (this.session !== undefined) {\n                                return [\n                                    2 /*return*/ \n                                ];\n                            }\n                            return [\n                                4 /*yield*/ ,\n                                this.messageQueue.receive(function(m) {\n                                    return m.type === \"session.created\";\n                                })\n                            ];\n                        case 1:\n                            message = _a.sent();\n                            if (message === null) {\n                                throw new Error(\"Failed to initialize session\");\n                            }\n                            if (message.type === \"error\") {\n                                throw new RTError(message.error);\n                            }\n                            if (message.type !== \"session.created\") {\n                                throw new Error(\"Unexpected message type\");\n                            }\n                            this.session = message.session;\n                            return [\n                                2 /*return*/ \n                            ];\n                    }\n                });\n            });\n        }();\n        return this.initPromise;\n    };\n    RTClient.prototype.configure = function(params) {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"session.update\",\n                                session: params\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"session.updated\";\n                            })\n                        ];\n                    case 3:\n                        message = _a.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to update session\");\n                        }\n                        if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        }\n                        if (message.type !== \"session.updated\") {\n                            throw new Error(\"Unexpected message type\");\n                        }\n                        this.session = message.session;\n                        return [\n                            2 /*return*/ ,\n                            this.session\n                        ];\n                }\n            });\n        });\n    };\n    RTClient.prototype.sendAudio = function(audio) {\n        return __awaiter(this, void 0, void 0, function() {\n            var base64;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        base64 = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(audio), false)));\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"input_audio_buffer.append\",\n                                audio: base64\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTClient.prototype.commitAudio = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            var _a, _b;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _c.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"input_audio_buffer.commit\"\n                            })\n                        ];\n                    case 2:\n                        _c.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"input_audio_buffer.committed\";\n                            })\n                        ];\n                    case 3:\n                        message = _c.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to commit audio\");\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type === \"input_audio_buffer.committed\") {\n                            return [\n                                2 /*return*/ ,\n                                RTInputAudioItem.create(message.item_id, undefined, ((_a = this.session) === null || _a === void 0 ? void 0 : _a.input_audio_transcription) !== undefined && ((_b = this.session) === null || _b === void 0 ? void 0 : _b.input_audio_transcription) !== null, this.messageQueue)\n                            ];\n                        } else {\n                            throw new Error(\"Unexpected message type\");\n                        }\n                }\n            });\n        });\n    };\n    RTClient.prototype.clearAudio = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"input_audio_buffer.clear\"\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"input_audio_buffer.cleared\";\n                            })\n                        ];\n                    case 3:\n                        message = _a.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to clear audio\");\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type !== \"input_audio_buffer.cleared\") {\n                            throw new Error(\"Unexpected message type\");\n                        }\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTClient.prototype.connectAvatar = function(client_sdp) {\n        return __awaiter(this, void 0, void 0, function() {\n            var base64, message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        base64 = btoa(JSON.stringify(client_sdp));\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"session.avatar.connect\",\n                                client_sdp: base64\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"session.avatar.connecting\";\n                            })\n                        ];\n                    case 3:\n                        message = _a.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to connect avatar\");\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type === \"session.avatar.connecting\") {\n                            return [\n                                2 /*return*/ ,\n                                new RTCSessionDescription(JSON.parse(atob(message.server_sdp)))\n                            ];\n                        } else {\n                            throw new Error(\"Unexpected message type\");\n                        }\n                }\n            });\n        });\n    };\n    RTClient.prototype.sendItem = function(item, previousItemId) {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        item.id = item.id || generateId(\"item\", 32);\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"conversation.item.create\",\n                                previous_item_id: previousItemId,\n                                item: item\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"conversation.item.created\" && m.item.id === item.id;\n                            })\n                        ];\n                    case 3:\n                        message = _a.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to create item\");\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type === \"conversation.item.created\") {\n                            return [\n                                2 /*return*/ ,\n                                message.item\n                            ];\n                        } else {\n                            throw new Error(\"Unexpected message type\");\n                        }\n                }\n            });\n        });\n    };\n    RTClient.prototype.removeItem = function(itemId) {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"conversation.item.delete\",\n                                item_id: itemId\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"conversation.item.deleted\" && m.item_id === itemId;\n                            })\n                        ];\n                    case 3:\n                        message = _a.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to delete item\");\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type === \"conversation.item.deleted\") {\n                            return [\n                                2 /*return*/ \n                            ];\n                        } else {\n                            throw new Error(\"Unexpected message type\");\n                        }\n                }\n            });\n        });\n    };\n    RTClient.prototype.generateResponse = function(response, waitForGenerated) {\n        return __awaiter(this, void 0, void 0, function() {\n            var message;\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.init()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            4 /*yield*/ ,\n                            this.client.send({\n                                type: \"response.create\",\n                                response: response\n                            })\n                        ];\n                    case 2:\n                        _a.sent();\n                        if (!(!this.iterating && waitForGenerated === true)) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            this.messageQueue.receive(function(m) {\n                                return m.type === \"response.created\";\n                            })\n                        ];\n                    case 3:\n                        message = _a.sent();\n                        if (message === null) {\n                            throw new Error(\"Failed to create response\");\n                        } else if (message.type === \"error\") {\n                            throw new RTError(message.error);\n                        } else if (message.type === \"response.created\") {\n                            return [\n                                2 /*return*/ ,\n                                RTResponse.create(message.response, this.messageQueue, this.client)\n                            ];\n                        }\n                        throw new Error(\"Unexpected message type\");\n                    case 4:\n                        return [\n                            2 /*return*/ ,\n                            undefined\n                        ];\n                }\n            });\n        });\n    };\n    RTClient.prototype.events = function() {\n        return __asyncGenerator(this, arguments, function events_1() {\n            var message, input_audio_item;\n            var _a, _b;\n            return __generator(this, function(_c) {\n                switch(_c.label){\n                    case 0:\n                        _c.trys.push([\n                            0,\n                            ,\n                            14,\n                            15\n                        ]);\n                        this.iterating = true;\n                        _c.label = 1;\n                    case 1:\n                        return [\n                            4 /*yield*/ ,\n                            __await(this.messageQueue.receive(function(m) {\n                                return m.type === \"input_audio_buffer.speech_started\" || m.type === \"response.created\";\n                            }))\n                        ];\n                    case 2:\n                        message = _c.sent();\n                        if (!(message === null)) return [\n                            3 /*break*/ ,\n                            3\n                        ];\n                        return [\n                            3 /*break*/ ,\n                            13\n                        ];\n                    case 3:\n                        if (!(message.type === \"error\")) return [\n                            3 /*break*/ ,\n                            4\n                        ];\n                        throw new RTError(message.error);\n                    case 4:\n                        if (!(message.type === \"input_audio_buffer.speech_started\")) return [\n                            3 /*break*/ ,\n                            8\n                        ];\n                        input_audio_item = RTInputAudioItem.create(message.item_id, message.audio_start_ms, ((_a = this.session) === null || _a === void 0 ? void 0 : _a.input_audio_transcription) !== undefined && ((_b = this.session) === null || _b === void 0 ? void 0 : _b.input_audio_transcription) !== null, this.messageQueue);\n                        return [\n                            4 /*yield*/ ,\n                            __await(input_audio_item)\n                        ];\n                    case 5:\n                        return [\n                            4 /*yield*/ ,\n                            _c.sent()\n                        ];\n                    case 6:\n                        _c.sent();\n                        return [\n                            4 /*yield*/ ,\n                            __await(input_audio_item.waitForCompletion())\n                        ];\n                    case 7:\n                        _c.sent();\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 8:\n                        if (!(message.type === \"response.created\")) return [\n                            3 /*break*/ ,\n                            11\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            __await(RTResponse.create(message.response, this.messageQueue, this.client))\n                        ];\n                    case 9:\n                        return [\n                            4 /*yield*/ ,\n                            _c.sent()\n                        ];\n                    case 10:\n                        _c.sent();\n                        return [\n                            3 /*break*/ ,\n                            12\n                        ];\n                    case 11:\n                        throw new Error(\"Unexpected message type\");\n                    case 12:\n                        return [\n                            3 /*break*/ ,\n                            1\n                        ];\n                    case 13:\n                        return [\n                            3 /*break*/ ,\n                            15\n                        ];\n                    case 14:\n                        this.iterating = false;\n                        return [\n                            7 /*endfinally*/ \n                        ];\n                    case 15:\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    RTClient.prototype.close = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(_a) {\n                switch(_a.label){\n                    case 0:\n                        return [\n                            4 /*yield*/ ,\n                            this.client.close()\n                        ];\n                    case 1:\n                        _a.sent();\n                        return [\n                            2 /*return*/ \n                        ];\n                }\n            });\n        });\n    };\n    return RTClient;\n}();\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rt-client/dist/esm/index.js\n");

/***/ })

};
;